"""
Script pour g√©n√©rer beaucoup plus de fake data dans la base de donn√©es
"""
import asyncio
import sys
import random
from pathlib import Path
from datetime import datetime, timedelta, timezone

PROJECT_ROOT = Path(__file__).resolve().parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select

from app.models.user import User
from app.models.job_offer import JobOffer
from app.models.application import Application, ApplicationDocument
from app.models.candidate_profile import CandidateProfile
from app.models.notification import Notification
from app.models.interview import InterviewSlot
from app.core.security.security import PasswordManager

# Donn√©es fictives pour g√©n√©ration
FIRST_NAMES = [
    "Marie", "Jean", "Fatou", "Moussa", "Ada", "Pierre", "Aminata", "Ibrahim",
    "Sophie", "Fran√ßois", "A√Øcha", "Omar", "Claire", "Mamadou", "Rachelle", "Youssouf",
    "Nad√®ge", "Antoine", "Bintou", "Samba", "√âmilie", "Boubacar", "Rosine", "Abdoul"
]

LAST_NAMES = [
    "Mavoungou", "Lovelace", "N'Dong", "Obiang", "Ella", "Nguema", "Oyono", "Bongo",
    "Allogho", "Mintsa", "Bekale", "Ondo", "Moussavou", "Dzondo", "Nz√©", "Makaya",
    "Bounda", "Nkogh√©", "Kombila", "Mangongo", "Moussounda", "Zogo", "Essono", "Yembit"
]

DEPARTMENTS = ["IT", "RH", "Finance", "Commercial", "Technique", "Logistique", "Marketing", "Production"]

POSITIONS = [
    "D√©veloppeur", "Analyste", "Chef de projet", "Technicien", "Ing√©nieur",
    "Responsable", "Consultant", "Assistant", "Manager", "Coordinateur"
]

SKILLS = [
    "Python", "JavaScript", "SQL", "Linux", "Networking", "PostgreSQL", "Docker",
    "FastAPI", "React", "Git", "AWS", "Azure", "Gestion de projet", "Communication",
    "Leadership", "Analyse de donn√©es", "S√©curit√©", "DevOps", "Agile", "Scrum"
]

JOB_TITLES = [
    "D√©veloppeur Full Stack", "Ing√©nieur Syst√®mes", "Analyste de donn√©es",
    "Chef de projet IT", "Administrateur r√©seaux", "Technicien support",
    "Responsable RH", "Gestionnaire comptable", "Charg√© de communication",
    "Ing√©nieur qualit√©", "Responsable logistique", "Commercial terrain",
    "D√©veloppeur Backend", "D√©veloppeur Frontend", "Architecte solutions"
]

JOB_DESCRIPTIONS = [
    "Rejoignez notre √©quipe dynamique pour contribuer √† des projets innovants.",
    "Nous recherchons un professionnel exp√©riment√© pour renforcer notre √©quipe.",
    "Poste strat√©gique au sein d'une entreprise en pleine croissance.",
    "Opportunit√© unique de d√©velopper vos comp√©tences dans un environnement stimulant.",
    "Participez √† la transformation digitale de la SEEG."
]

CITIES = ["Libreville", "Port-Gentil", "Franceville", "Oyem", "Moanda", "Mouila", "Lambar√©n√©"]

CONTRACT_TYPES = ["CDI", "CDD", "Stage", "Alternance"]

APPLICATION_STATUSES = ["pending", "reviewed", "shortlisted", "interviewed", "accepted", "rejected"]

async def seed_more_data():
    """G√©n√©rer beaucoup plus de fake data"""
    
    database_url = "postgresql+asyncpg://postgres:    @localhost:5432/recruteur"
    engine = create_async_engine(database_url, echo=False)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    print("üîÑ G√©n√©ration de fake data suppl√©mentaires...\n")
    
    async with async_session() as session:
        try:
            # R√©cup√©rer les utilisateurs existants
            result = await session.execute(select(User))
            existing_users = result.scalars().all()
            existing_emails = {u.email for u in existing_users}
            
            recruiters = [u for u in existing_users if u.role == "recruiter"]
            if not recruiters:
                print("‚ö† Aucun recruteur trouv√©, cr√©ation d'un recruteur par d√©faut...")
                recruiter = User(
                    email="recruiter.default@seeg.ga",
                    first_name="Recruteur",
                    last_name="Par D√©faut",
                    role="recruiter",
                    phone="+24107000000",
                    hashed_password=PasswordManager.hash_password("Password123!")
                )
                session.add(recruiter)
                await session.flush()
                recruiters = [recruiter]
            
            print(f"‚úì {len(recruiters)} recruteur(s) disponible(s)")
            
            # 1. Cr√©er plus de candidats
            print("\nüìù Cr√©ation de 20 candidats suppl√©mentaires...")
            new_candidates = []
            for i in range(20):
                email = f"candidate{i+10}@seeg.ga"
                if email in existing_emails:
                    continue
                    
                first_name = random.choice(FIRST_NAMES)
                last_name = random.choice(LAST_NAMES)
                
                candidate = User(
                    email=email,
                    first_name=first_name,
                    last_name=last_name,
                    role="candidate",
                    phone=f"+2410{random.randint(1000000, 9999999)}",
                    hashed_password=PasswordManager.hash_password("Password123!")
                )
                session.add(candidate)
                new_candidates.append(candidate)
            
            await session.flush()
            print(f"  ‚úì {len(new_candidates)} candidats cr√©√©s")
            
            # 2. Cr√©er des profils pour les nouveaux candidats
            print("\nüìã Cr√©ation des profils candidats...")
            for candidate in new_candidates:
                profile = CandidateProfile(
                    user_id=candidate.id,
                    address=f"{random.choice(['Quartier Centre', 'Quartier R√©sidentiel', 'Zone Industrielle'])}, {random.choice(CITIES)}",
                    availability=random.choice(["Imm√©diate", "1 mois", "2 mois", "N√©gociable"]),
                    current_department=random.choice(DEPARTMENTS),
                    current_position=random.choice(POSITIONS),
                    education=random.choice(["Bac+2", "Bac+3", "Bac+5", "Master", "Doctorat"]),
                    gender=random.choice(["M", "F"]),
                    years_experience=random.randint(0, 15),
                    skills=str(random.sample(SKILLS, k=random.randint(3, 8)))
                )
                session.add(profile)
            
            await session.flush()
            print(f"  ‚úì {len(new_candidates)} profils cr√©√©s")
            
            # 3. Cr√©er plus d'offres d'emploi
            print("\nüíº Cr√©ation de 15 offres d'emploi...")
            new_jobs = []
            for i in range(15):
                recruiter = random.choice(recruiters)
                job_title = random.choice(JOB_TITLES)
                
                job = JobOffer(
                    recruiter_id=recruiter.id,
                    title=f"{job_title} - {random.choice(['Exp√©riment√©', 'Junior', 'Senior', 'Confirm√©'])}",
                    description=random.choice(JOB_DESCRIPTIONS),
                    location=random.choice(CITIES),
                    contract_type=random.choice(CONTRACT_TYPES),
                    department=random.choice(DEPARTMENTS),
                    requirements=random.sample(SKILLS, k=random.randint(3, 6)),
                    benefits=random.sample([
                        "Assurance sant√©", "Tickets restaurant", "Prime annuelle",
                        "Formation continue", "T√©l√©travail partiel", "Mutuelle famille"
                    ], k=random.randint(2, 4)),
                    responsibilities=random.sample([
                        "D√©velopper des solutions innovantes",
                        "G√©rer une √©quipe",
                        "Assurer le support technique",
                        "Participer aux r√©unions strat√©giques",
                        "Maintenir la documentation",
                        "Former les nouveaux collaborateurs"
                    ], k=random.randint(2, 4)),
                    status=random.choice(["open", "open", "open", "closed"]),  # Plus de chances d'√™tre ouvert
                    application_deadline=datetime.now(timezone.utc) + timedelta(days=random.randint(15, 90)),
                    salary_min=random.randint(300000, 800000),
                    salary_max=random.randint(800000, 2000000)
                )
                session.add(job)
                new_jobs.append(job)
            
            await session.flush()
            print(f"  ‚úì {len(new_jobs)} offres d'emploi cr√©√©es")
            
            # 4. R√©cup√©rer tous les candidats et offres
            result = await session.execute(select(User).where(User.role == "candidate"))
            all_candidates = result.scalars().all()
            
            result = await session.execute(select(JobOffer))
            all_jobs = result.scalars().all()
            
            # 5. Cr√©er des candidatures
            print("\nüì® Cr√©ation de 50 candidatures...")
            applications_created = 0
            
            for _ in range(50):
                candidate = random.choice(all_candidates)
                job = random.choice(all_jobs)
                
                # V√©rifier si candidature existe d√©j√†
                result = await session.execute(
                    select(Application).where(
                        Application.candidate_id == candidate.id,
                        Application.job_offer_id == job.id
                    )
                )
                existing = result.scalar_one_or_none()
                
                if not existing:
                    application = Application(
                        candidate_id=candidate.id,
                        job_offer_id=job.id,
                        status=random.choice(APPLICATION_STATUSES),
                        reference_contacts=f"R√©f√©rence: +2410{random.randint(1000000, 9999999)}",
                        availability_start=datetime.now(timezone.utc) + timedelta(days=random.randint(1, 60))
                    )
                    session.add(application)
                    applications_created += 1
            
            await session.flush()
            print(f"  ‚úì {applications_created} candidatures cr√©√©es")
            
            # 6. Ajouter quelques documents PDF fictifs
            print("\nüìÑ Ajout de documents PDF aux candidatures...")
            result = await session.execute(select(Application).limit(20))
            sample_applications = result.scalars().all()
            
            pdf_content = b"%PDF-1.4\n%Fake CV PDF for testing\n1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj\n"
            
            docs_created = 0
            for app in sample_applications:
                if random.random() > 0.3:  # 70% des candidatures ont des documents
                    # CV
                    cv_doc = ApplicationDocument(
                        application_id=app.id,
                        document_type="cv",
                        file_name=f"CV_{app.id}.pdf",
                        file_data=pdf_content,
                        file_size=len(pdf_content),
                        file_type="application/pdf"
                    )
                    session.add(cv_doc)
                    docs_created += 1
                    
                    if random.random() > 0.5:  # 50% ont aussi une lettre de motivation
                        lm_doc = ApplicationDocument(
                            application_id=app.id,
                            document_type="cover_letter",
                            file_name=f"Lettre_Motivation_{app.id}.pdf",
                            file_data=pdf_content,
                            file_size=len(pdf_content),
                            file_type="application/pdf"
                        )
                        session.add(lm_doc)
                        docs_created += 1
            
            await session.flush()
            print(f"  ‚úì {docs_created} documents PDF cr√©√©s")
            
            # 7. Cr√©er des notifications pour certains candidats
            print("\nüîî Cr√©ation de notifications...")
            notifs_created = 0
            
            for candidate in random.sample(all_candidates, min(30, len(all_candidates))):
                notif = Notification(
                    user_id=candidate.id,
                    title=random.choice([
                        "Nouvelle offre disponible",
                        "Votre candidature a √©t√© vue",
                        "Mise √† jour de statut",
                        "Entretien planifi√©"
                    ]),
                    message=random.choice([
                        "Une nouvelle offre correspondant √† votre profil est disponible.",
                        "Votre candidature a √©t√© consult√©e par un recruteur.",
                        "Le statut de votre candidature a √©t√© mis √† jour.",
                        "Un entretien a √©t√© planifi√© pour votre candidature."
                    ]),
                    type=random.choice(["application", "job", "interview", "system"]),
                    read=random.choice([True, False])
                )
                session.add(notif)
                notifs_created += 1
            
            await session.flush()
            print(f"  ‚úì {notifs_created} notifications cr√©√©es")
            
            # 8. Cr√©er des cr√©neaux d'entretien
            print("\nüéØ Cr√©ation de cr√©neaux d'entretien...")
            result = await session.execute(
                select(Application).where(
                    Application.status.in_(["shortlisted", "interviewed"])
                ).limit(15)
            )
            interview_applications = result.scalars().all()
            
            interviews_created = 0
            for app in interview_applications:
                interview_date = datetime.now(timezone.utc) + timedelta(days=random.randint(1, 30))
                interview = InterviewSlot(
                    application_id=app.id,
                    candidate_name=f"{app.candidate.first_name} {app.candidate.last_name}" if app.candidate else "N/A",
                    job_title=app.job_offer.title if app.job_offer else "N/A",
                    date=interview_date.strftime("%Y-%m-%d"),
                    time=f"{random.randint(8, 17):02d}:00:00",
                    status=random.choice(["scheduled", "completed", "cancelled"]),
                    is_available=False,
                    location=random.choice(["Bureau RH", "Salle de r√©union A", "Visioconf√©rence", "Site production"]),
                    notes=random.choice(["RAS", "Confirmer par email", "Pr√©voir 1h", ""])
                )
                session.add(interview)
                interviews_created += 1
            
            await session.flush()
            print(f"  ‚úì {interviews_created} entretiens planifi√©s")
            
            await session.commit()
            
            print("\n" + "="*60)
            print("‚úÖ G√âN√âRATION TERMIN√âE AVEC SUCC√àS!")
            print("="*60)
            print(f"\nüìä R√©sum√© des donn√©es g√©n√©r√©es:")
            print(f"  ‚Ä¢ Candidats: {len(new_candidates)}")
            print(f"  ‚Ä¢ Profils: {len(new_candidates)}")
            print(f"  ‚Ä¢ Offres d'emploi: {len(new_jobs)}")
            print(f"  ‚Ä¢ Candidatures: {applications_created}")
            print(f"  ‚Ä¢ Documents PDF: {docs_created}")
            print(f"  ‚Ä¢ Notifications: {notifs_created}")
            print(f"  ‚Ä¢ Entretiens: {interviews_created}")
            print(f"\nüéâ La base de donn√©es est maintenant bien remplie!")
            
        except Exception as e:
            await session.rollback()
            print(f"\n‚ùå Erreur lors de la g√©n√©ration:")
            print(f"  {type(e).__name__}: {e}")
            import traceback
            traceback.print_exc()
            raise
        finally:
            await session.close()
    
    await engine.dispose()

if __name__ == "__main__":
    asyncio.run(seed_more_data())
