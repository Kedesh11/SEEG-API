version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: seeg-postgres
    environment:
      POSTGRES_USER: seeg
      POSTGRES_PASSWORD: seeg_secure_password
      POSTGRES_DB: seeg_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - seeg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seeg"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache et rate limiting
  redis:
    image: redis:7-alpine
    container_name: seeg-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - seeg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger pour le tracing distribué
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: seeg-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI Jaeger
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - seeg-network

  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: seeg-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - seeg-network
    depends_on:
      - seeg-api

  # Grafana pour la visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: seeg-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - seeg-network
    depends_on:
      - prometheus

  # Application SEEG-API
  seeg-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seeg-api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://seeg:seeg_secure_password@postgres:5432/seeg_db
      DATABASE_URL_SYNC: postgresql://seeg:seeg_secure_password@postgres:5432/seeg_db
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ISSUER: seeg-hcm-api
      JWT_AUDIENCE: seeg-hcm-frontend
      
      # Monitoring
      LOG_LEVEL: INFO
      ENABLE_TRACING: "true"
      JAEGER_ENDPOINT: jaeger:6831
      OTLP_ENDPOINT: http://jaeger:4317
      METRICS_ENABLED: "true"
      
      # Application
      ENVIRONMENT: production
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
      
      # Email (optional)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL:-noreply@seeg.ga}
      
      # Application Insights (optional)
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING:-}
    
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - seeg-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (optionnel) pour le reverse proxy
  nginx:
    image: nginx:alpine
    container_name: seeg-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - seeg-network
    depends_on:
      - seeg-api

networks:
  seeg-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: