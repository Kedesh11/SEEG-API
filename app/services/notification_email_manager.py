"""
Gestionnaire unifi√© pour l'envoi d'emails ET de notifications
Respect des principes SOLID et des meilleures pratiques de g√©nie logiciel

Principes appliqu√©s:
- Single Responsibility: Chaque m√©thode g√®re une seule action utilisateur
- Open/Closed: Facilement extensible pour de nouvelles notifications
- Dependency Injection: Les services sont inject√©s, pas cr√©√©s
- Fail-Safe: Les erreurs d'email/notification ne bloquent jamais l'action principale
- Logging: Tra√ßabilit√© compl√®te de toutes les op√©rations
- Idempotence: Les notifications peuvent √™tre envoy√©es plusieurs fois sans effet de bord
"""
from typing import Optional
from sqlalchemy.ext.asyncio import AsyncSession
from uuid import UUID
import structlog

from app.services.email import EmailService
from app.services.notification_manager import NotificationManager
from app.core.exceptions import EmailError

logger = structlog.get_logger(__name__)


class NotificationEmailManager:
    """
    Gestionnaire unifi√© pour envoyer simultan√©ment des emails et des notifications
    
    Architecture:
    - Composition > H√©ritage: Utilise EmailService et NotificationManager
    - Fail-Safe: Les erreurs n'interrompent jamais le flux principal
    - Atomic Operations: Chaque notification/email est ind√©pendant
    - Detailed Logging: Tra√ßabilit√© compl√®te
    """
    
    def __init__(self, db: AsyncSession):
        """
        Initialiser le gestionnaire avec injection de d√©pendances
        
        Args:
            db: Session de base de donn√©es (partag√©e entre les services)
        """
        self.db = db
        self.email_service = EmailService(db)
        self.notification_manager = NotificationManager(db)
    
    # ==================== INSCRIPTION ====================
    
    async def notify_and_email_registration(
        self,
        user_id: UUID,
        email: str,
        first_name: str,
        last_name: str,
        sexe: Optional[str] = None
    ) -> dict:
        """
        Envoyer email de bienvenue + notification apr√®s inscription
        
        Pattern: Fail-Safe avec retour d√©taill√© du statut
        
        Args:
            user_id: ID de l'utilisateur
            email: Email de l'utilisateur
            first_name: Pr√©nom
            last_name: Nom
            sexe: Sexe (pour personnalisation email)
            
        Returns:
            dict: Statut de chaque envoi {email_sent: bool, notification_sent: bool}
        """
        result = {"email_sent": False, "notification_sent": False}
        
        # 1. Envoi email (non-bloquant)
        try:
            logger.info("üìß Envoi email bienvenue", user_id=str(user_id), email=email)
            await self.email_service.send_welcome_email(
                to_email=email,
                first_name=first_name,
                last_name=last_name,
                sexe=sexe
            )
            result["email_sent"] = True
            logger.info("‚úÖ Email bienvenue envoy√©", user_id=str(user_id))
        except EmailError as e:
            logger.warning("‚ö†Ô∏è Erreur envoi email bienvenue", 
                          user_id=str(user_id), error=str(e))
        except Exception as e:
            logger.error("‚ùå Erreur inattendue email bienvenue", 
                        user_id=str(user_id), error=str(e), exc_info=True)
        
        # 2. Cr√©ation notification (non-bloquant)
        try:
            logger.info("üîî Cr√©ation notification bienvenue", user_id=str(user_id))
            await self.notification_manager.notify_user_registered(
                user_id=user_id,
                email=email
            )
            await self.db.flush()  # Persister sans commit complet
            result["notification_sent"] = True
            logger.info("‚úÖ Notification bienvenue cr√©√©e", user_id=str(user_id))
        except Exception as e:
            logger.error("‚ùå Erreur cr√©ation notification bienvenue", 
                        user_id=str(user_id), error=str(e), exc_info=True)
        
        return result
    
    # ==================== R√âINITIALISATION MOT DE PASSE ====================
    
    async def notify_and_email_password_reset_request(
        self,
        user_id: UUID,
        email: str
    ) -> dict:
        """
        Notification apr√®s demande de r√©initialisation de mot de passe
        
        Note: L'email de reset avec le token est envoy√© par AuthService.reset_password_request
        Cette m√©thode ajoute uniquement la notification dans l'application
        
        Args:
            user_id: ID de l'utilisateur
            email: Email de l'utilisateur
            
        Returns:
            dict: Statut de l'envoi {notification_sent: bool}
        """
        result = {"notification_sent": False}
        
        # Cr√©ation notification (non-bloquant)
        try:
            logger.info("üîî Cr√©ation notification reset password", 
                       user_id=str(user_id), email=email)
            await self.notification_manager.notify_password_reset_requested(
                user_id=user_id,
                email=email
            )
            await self.db.flush()
            result["notification_sent"] = True
            logger.info("‚úÖ Notification reset password cr√©√©e", user_id=str(user_id))
        except Exception as e:
            logger.error("‚ùå Erreur notification reset password", 
                        user_id=str(user_id), error=str(e), exc_info=True)
        
        return result
    
    async def notify_and_email_password_changed(
        self,
        user_id: UUID,
        email: str,
        first_name: str,
        last_name: str
    ) -> dict:
        """
        Notification apr√®s changement de mot de passe r√©ussi
        
        Args:
            user_id: ID de l'utilisateur
            email: Email de l'utilisateur
            first_name: Pr√©nom
            last_name: Nom
            
        Returns:
            dict: Statut {email_sent: bool, notification_sent: bool}
        """
        result = {"email_sent": False, "notification_sent": False}
        
        # 1. Envoi email de confirmation (s√©curit√©)
        try:
            logger.info("üìß Envoi email changement password", 
                       user_id=str(user_id), email=email)
            
            subject = "üîê Votre mot de passe a √©t√© modifi√©"
            html_body = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
        .alert {{ background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 20px 0; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 12px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîê Mot de passe modifi√©</h1>
        </div>
        <div class="content">
            <p>Bonjour {first_name} {last_name},</p>
            
            <p>Votre mot de passe a √©t√© modifi√© avec succ√®s.</p>
            
            <div class="alert">
                <strong>‚ö†Ô∏è Si vous n'√™tes pas √† l'origine de cette modification:</strong>
                <ul>
                    <li>Contactez imm√©diatement notre support</li>
                    <li>Changez votre mot de passe d√®s que possible</li>
                </ul>
            </div>
            
            <p>Date de modification: {self._get_current_datetime_formatted()}</p>
            
            <p>Cordialement,<br>L'√©quipe SEEG Recrutement</p>
        </div>
        <div class="footer">
            <p>&copy; 2025 SEEG - Soci√©t√© d'√ânergie et d'Eau du Gabon</p>
        </div>
    </div>
</body>
</html>
            """
            
            await self.email_service.send_email(
                to=email,
                subject=subject,
                body=f"Votre mot de passe a √©t√© modifi√©. Si vous n'√™tes pas √† l'origine de cette action, contactez-nous imm√©diatement.",
                html_body=html_body
            )
            result["email_sent"] = True
            logger.info("‚úÖ Email changement password envoy√©", user_id=str(user_id))
        except Exception as e:
            logger.warning("‚ö†Ô∏è Erreur envoi email changement password", 
                          user_id=str(user_id), error=str(e))
        
        # 2. Cr√©ation notification
        try:
            logger.info("üîî Cr√©ation notification changement password", 
                       user_id=str(user_id))
            await self.notification_manager.notify_password_changed(user_id=user_id)
            await self.db.flush()
            result["notification_sent"] = True
            logger.info("‚úÖ Notification changement password cr√©√©e", user_id=str(user_id))
        except Exception as e:
            logger.error("‚ùå Erreur notification changement password", 
                        user_id=str(user_id), error=str(e), exc_info=True)
        
        return result
    
    # ==================== CANDIDATURE ====================
    
    async def notify_and_email_application_submitted(
        self,
        user_id: UUID,
        application_id: UUID,
        candidate_email: str,
        candidate_name: str,
        job_title: str
    ) -> dict:
        """
        Envoyer email + notification apr√®s soumission de candidature
        
        Args:
            user_id: ID de l'utilisateur
            application_id: ID de la candidature
            candidate_email: Email du candidat
            candidate_name: Nom complet du candidat
            job_title: Titre du poste
            
        Returns:
            dict: Statut {email_sent: bool, notification_sent: bool}
        """
        result = {"email_sent": False, "notification_sent": False}
        
        # 1. Envoi email de confirmation
        try:
            logger.info("üìß Envoi email confirmation candidature", 
                       user_id=str(user_id), application_id=str(application_id))
            await self.email_service.send_application_confirmation(
                candidate_email=candidate_email,
                candidate_name=candidate_name,
                job_title=job_title,
                application_id=str(application_id)
            )
            result["email_sent"] = True
            logger.info("‚úÖ Email confirmation candidature envoy√©", 
                       application_id=str(application_id))
        except Exception as e:
            logger.warning("‚ö†Ô∏è Erreur envoi email confirmation candidature", 
                          application_id=str(application_id), error=str(e))
        
        # 2. Cr√©ation notification
        try:
            logger.info("üîî Cr√©ation notification candidature", 
                       user_id=str(user_id), application_id=str(application_id))
            await self.notification_manager.notify_application_submitted(
                user_id=user_id,
                application_id=application_id,
                job_title=job_title
            )
            await self.db.flush()
            result["notification_sent"] = True
            logger.info("‚úÖ Notification candidature cr√©√©e", 
                       application_id=str(application_id))
        except Exception as e:
            logger.error("‚ùå Erreur notification candidature", 
                        application_id=str(application_id), error=str(e), exc_info=True)
        
        return result
    
    async def notify_application_draft_saved(
        self,
        user_id: UUID,
        job_offer_id: UUID,
        job_title: str
    ) -> dict:
        """
        Notification uniquement pour sauvegarde de brouillon (pas d'email n√©cessaire)
        
        Args:
            user_id: ID de l'utilisateur
            job_offer_id: ID de l'offre d'emploi
            job_title: Titre du poste
            
        Returns:
            dict: Statut {notification_sent: bool}
        """
        result = {"notification_sent": False}
        
        try:
            logger.info("üîî Cr√©ation notification brouillon", 
                       user_id=str(user_id), job_offer_id=str(job_offer_id))
            await self.notification_manager.notify_application_draft_saved(
                user_id=user_id,
                job_offer_id=job_offer_id,
                job_title=job_title
            )
            await self.db.flush()
            result["notification_sent"] = True
            logger.info("‚úÖ Notification brouillon cr√©√©e", user_id=str(user_id))
        except Exception as e:
            logger.error("‚ùå Erreur notification brouillon", 
                        user_id=str(user_id), error=str(e), exc_info=True)
        
        return result
    
    async def notify_and_email_application_status_changed(
        self,
        user_id: UUID,
        application_id: UUID,
        candidate_email: str,
        candidate_name: str,
        job_title: str,
        new_status: str
    ) -> dict:
        """
        Envoyer email + notification apr√®s changement de statut de candidature
        
        Args:
            user_id: ID de l'utilisateur
            application_id: ID de la candidature
            candidate_email: Email du candidat
            candidate_name: Nom du candidat
            job_title: Titre du poste
            new_status: Nouveau statut
            
        Returns:
            dict: Statut {email_sent: bool, notification_sent: bool}
        """
        result = {"email_sent": False, "notification_sent": False}
        
        # 1. Envoi email
        try:
            logger.info("üìß Envoi email changement statut candidature", 
                       application_id=str(application_id), status=new_status)
            await self.email_service.send_application_status_update(
                candidate_email=candidate_email,
                candidate_name=candidate_name,
                job_title=job_title,
                new_status=new_status,
                notes=None
            )
            result["email_sent"] = True
            logger.info("‚úÖ Email changement statut envoy√©", 
                       application_id=str(application_id))
        except Exception as e:
            logger.warning("‚ö†Ô∏è Erreur envoi email changement statut", 
                          application_id=str(application_id), error=str(e))
        
        # 2. Cr√©ation notification
        try:
            logger.info("üîî Cr√©ation notification changement statut", 
                       application_id=str(application_id), status=new_status)
            await self.notification_manager.notify_application_status_changed(
                user_id=user_id,
                application_id=application_id,
                job_title=job_title,
                new_status=new_status
            )
            await self.db.flush()
            result["notification_sent"] = True
            logger.info("‚úÖ Notification changement statut cr√©√©e", 
                       application_id=str(application_id))
        except Exception as e:
            logger.error("‚ùå Erreur notification changement statut", 
                        application_id=str(application_id), error=str(e), exc_info=True)
        
        return result
    
    # ==================== M√âTHODES UTILITAIRES ====================
    
    def _get_current_datetime_formatted(self) -> str:
        """
        Obtenir la date et l'heure actuelles format√©es
        
        Returns:
            str: Date et heure au format "JJ/MM/AAAA √† HH:MM"
        """
        from datetime import datetime
        now = datetime.now()
        return now.strftime("%d/%m/%Y √† %H:%M")

