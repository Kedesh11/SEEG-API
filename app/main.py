"""
Point d'entr√©e principal de l'application One HCM SEEG
"""
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
import structlog

from app.core.config.config import settings
from app.core.logging.logging import LoggingConfig

# Configuration du logging
LoggingConfig.setup_logging()
logger = structlog.get_logger(__name__)

# ============================================================================
# CR√âATION DE L'APPLICATION FASTAPI
# ============================================================================

app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="""
    ## API One HCM SEEG - Syst√®me de Gestion des Ressources Humaines
    
    Cette API permet de g√©rer l'ensemble du processus de recrutement de la SEEG :
    
    * **Authentification** : Connexion, inscription, gestion des tokens
    * **Utilisateurs** : Gestion des profils candidats, recruteurs et administrateurs
    * **Offres d'emploi** : Cr√©ation, modification et consultation des postes
    * **Candidatures** : Soumission et suivi des candidatures
    * **√âvaluations** : Protocoles d'√©valuation des candidats
    * **Notifications** : Syst√®me de notifications
    * **Entretiens** : Planification et gestion des entretiens
    * **Documents PDF** : Upload, stockage et gestion s√©curis√©e des fichiers PDF (CV, lettres, dipl√¥mes, etc.)
    
    ### Frontend
    Interface utilisateur disponible sur : https://www.seeg-talentsource.com
    """,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=[
        {
            "name": "üè† Accueil",
            "description": "Endpoints g√©n√©raux de l'API - Statut, sant√©, informations"
        },
        {
            "name": "üîê Authentification",
            "description": "Gestion de l'authentification - Connexion, inscription, tokens JWT"
        },
        {
            "name": "üë• Utilisateurs",
            "description": "Gestion des utilisateurs - Profils, r√¥les, permissions"
        },
        {
            "name": "üíº Offres d'emploi",
            "description": "Gestion des offres d'emploi - Cr√©ation, modification, consultation"
        },
        {
            "name": "üìù Candidatures",
            "description": "Gestion des candidatures - Soumission, suivi, statuts"
        },
        {
            "name": "üìÑ Documents PDF",
            "description": "Gestion des documents PDF li√©s aux candidatures (CV, lettres de motivation, dipl√¥mes, certificats)"
        },
        {
            "name": "üìä √âvaluations",
            "description": "Gestion des √©valuations - Protocoles MTP, scores, recommandations"
        },
        {
            "name": "üîî Notifications",
            "description": "Syst√®me de notifications - Alertes, messages, suivi"
        },
        {
            "name": "üéØ Entretiens",
            "description": "Gestion des entretiens - Planification, cr√©neaux, suivi"
        }
    ]
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=settings.ALLOWED_CREDENTIALS,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# üè† MODULE ACCUEIL
# ============================================================================

@app.get("/", tags=["üè† Accueil"], summary="Point d'entr√©e de l'API")
async def root():
    """Point d'entr√©e principal de l'API One HCM SEEG"""
    return {
        "message": "API One HCM SEEG",
        "version": settings.APP_VERSION,
        "status": "active",
        "docs": "/docs",
        "redoc": "/redoc"
    }

@app.get("/health", tags=["üè† Accueil"], summary="V√©rifier l'√©tat de sant√© de l'API")
async def health_check():
    """V√©rifier que l'API et la base de donn√©es sont op√©rationnelles"""
    return {
        "status": "ok",
        "message": "API is healthy",
        "version": settings.APP_VERSION,
        "database": "connected",
        "pdf_storage": "enabled",
        "timestamp": "2024-01-01T00:00:00Z"
    }

@app.get("/info", tags=["üè† Accueil"], summary="Informations d√©taill√©es sur l'API")
async def info():
    """Obtenir des informations d√©taill√©es sur la configuration de l'API"""
    return {
        "app_name": settings.APP_NAME,
        "app_version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
        "debug_mode": settings.DEBUG,
        "allowed_origins": settings.ALLOWED_ORIGINS,
        "database_url": settings.DATABASE_URL[:50] + "..." if len(settings.DATABASE_URL) > 50 else settings.DATABASE_URL,
        "features": [
            "Authentification JWT",
            "Gestion des r√¥les",
            "Upload de documents PDF",
            "Stockage binaire des fichiers",
            "Validation stricte des formats",
            "Notifications en temps r√©el",
            "√âvaluations automatis√©es (MTP)",
            "Planification d'entretiens"
        ],
        "pdf_support": {
            "allowed_types": ["cover_letter", "cv", "certificats", "diplome"],
            "file_format": "PDF uniquement",
            "storage": "Base de donn√©es (BYTEA)",
            "validation": "Magic number + extension"
        }
    }

# ============================================================================
# IMPORT DES ROUTES
# ============================================================================

# Import des routes API
from app.api.v1.endpoints import auth, users, jobs, applications, evaluations, notifications, interviews

# Inclusion des routes dans l'application
app.include_router(auth.router, prefix="/api/v1/auth", tags=["üîê Authentification"])
app.include_router(users.router, prefix="/api/v1/users", tags=["üë• Utilisateurs"])
app.include_router(jobs.router, prefix="/api/v1/jobs", tags=["üíº Offres d'emploi"])
app.include_router(applications.router, prefix="/api/v1/applications", tags=["üìù Candidatures", "üìÑ Documents PDF"])
app.include_router(evaluations.router, prefix="/api/v1/evaluations", tags=["üìä √âvaluations"])
app.include_router(notifications.router, prefix="/api/v1/notifications", tags=["üîî Notifications"])
app.include_router(interviews.router, prefix="/api/v1/interviews", tags=["üéØ Entretiens"])

# ============================================================================
# GESTIONNAIRE D'ERREURS GLOBAL
# ============================================================================

@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Gestionnaire pour les erreurs 404"""
    return JSONResponse(content={
        "error": "Not Found",
        "message": "La ressource demand√©e n'a pas √©t√© trouv√©e",
        "status_code": 404,
        "path": str(request.url.path)
    }, status_code=404)

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """Gestionnaire pour les erreurs 500"""
    logger.error("Erreur interne du serveur", error=str(exc), path=str(request.url.path))
    return JSONResponse(content={
        "error": "Internal Server Error",
        "message": "Une erreur interne du serveur s'est produite",
        "status_code": 500
    }, status_code=500)

# ============================================================================
# √âV√âNEMENTS DE L'APPLICATION
# ============================================================================

@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage de l'application"""
    logger.info("D√©marrage de l'API One HCM SEEG", version=settings.APP_VERSION)

@app.on_event("shutdown")
async def shutdown_event():
    """√âv√©nement d'arr√™t de l'application"""
    logger.info("Arr√™t de l'API One HCM SEEG")

# ============================================================================
# POINT D'ENTR√âE PRINCIPAL
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_level="info"
    )
