"""
Application FastAPI principale avec documentation organis√©e par modules
"""
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from uuid import UUID
import structlog

from app.core.config import settings
from app.db.session import get_async_db_session
from app.models.user import User
from app.models.job_offer import JobOffer
from app.models.application import Application
from app.schemas.auth import LoginRequest, SignupRequest, TokenResponse
from app.schemas.user import UserResponse, UserCreate, UserUpdate
from app.schemas.job import JobOfferResponse, JobOfferCreate, JobOfferUpdate
from app.schemas.application import ApplicationResponse, ApplicationCreate, ApplicationUpdate
from app.services.auth import AuthService
from app.services.user import UserService
from app.services.job import JobOfferService
from app.services.application import ApplicationService
from app.core.dependencies import get_current_active_user, get_current_admin_user, get_current_recruiter_user

# Configuration du logging
logger = structlog.get_logger(__name__)

# Cr√©er l'application FastAPI avec tags personnalis√©s
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="""
    ## API One HCM SEEG - Syst√®me de Gestion des Ressources Humaines
    
    Cette API permet de g√©rer l'ensemble du processus de recrutement de la SEEG :
    
    * **Authentification** : Connexion, inscription, gestion des tokens
    * **Utilisateurs** : Gestion des profils candidats, recruteurs et administrateurs
    * **Offres d'emploi** : Cr√©ation, modification et consultation des postes
    * **Candidatures** : Soumission et suivi des candidatures
    * **√âvaluations** : Protocoles d'√©valuation des candidats
    * **Notifications** : Syst√®me de notifications
    * **Entretiens** : Planification et gestion des entretiens
    
    ### Frontend
    Interface utilisateur disponible sur : https://www.seeg-talentsource.com
    """,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=[
        {
            "name": "üè† Accueil",
            "description": "Endpoints g√©n√©raux de l'API - Statut, sant√©, informations"
        },
        {
            "name": "üîê Authentification",
            "description": "Gestion de l'authentification - Connexion, inscription, tokens JWT"
        },
        {
            "name": "üë• Utilisateurs",
            "description": "Gestion des utilisateurs - Profils candidats, recruteurs, administrateurs"
        },
        {
            "name": "üíº Offres d'emploi",
            "description": "Gestion des offres d'emploi - Cr√©ation, modification, consultation des postes"
        },
        {
            "name": "üìù Candidatures",
            "description": "Gestion des candidatures - Soumission, suivi, documents"
        },
        {
            "name": "üìä √âvaluations",
            "description": "Syst√®me d'√©valuation - Protocoles 1 et 2, scores, commentaires"
        },
        {
            "name": "üîî Notifications",
            "description": "Syst√®me de notifications - Alertes, messages, statuts"
        },
        {
            "name": "üéØ Entretiens",
            "description": "Gestion des entretiens - Planification, cr√©neaux, suivi"
        }
    ]
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=settings.ALLOWED_CREDENTIALS,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# üè† MODULE ACCUEIL
# ============================================================================

@app.get("/", tags=["üè† Accueil"], summary="Point d'entr√©e de l'API")
async def root():
    """Point d'entr√©e principal de l'API One HCM SEEG"""
    return {
        "message": "API One HCM SEEG",
        "version": settings.APP_VERSION,
        "status": "active",
        "frontend_url": "https://www.seeg-talentsource.com",
        "documentation": "/docs",
        "api_v1": "/api/v1",
        "modules": {
            "authentification": "/api/v1/auth",
            "utilisateurs": "/api/v1/users",
            "offres_emploi": "/api/v1/jobs",
            "candidatures": "/api/v1/applications",
            "evaluations": "/api/v1/evaluations",
            "notifications": "/api/v1/notifications",
            "entretiens": "/api/v1/interviews"
        }
    }

@app.get("/health", tags=["üè† Accueil"], summary="V√©rifier l'√©tat de sant√© de l'API")
async def health_check():
    """V√©rifier que l'API et la base de donn√©es sont op√©rationnelles"""
    return {
        "status": "ok",
        "message": "API is healthy",
        "version": settings.APP_VERSION,
        "database": "connected",
        "timestamp": "2024-01-01T00:00:00Z"
    }

@app.get("/info", tags=["üè† Accueil"], summary="Informations d√©taill√©es sur l'API")
async def info():
    """Obtenir des informations d√©taill√©es sur la configuration de l'API"""
    return {
        "app_name": settings.APP_NAME,
        "app_version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
        "debug_mode": settings.DEBUG,
        "allowed_origins": settings.ALLOWED_ORIGINS,
        "database_url": settings.DATABASE_URL[:50] + "..." if len(settings.DATABASE_URL) > 50 else settings.DATABASE_URL,
        "features": [
            "Authentification JWT",
            "Gestion des r√¥les",
            "Upload de documents",
            "Notifications en temps r√©el",
            "√âvaluations automatis√©es",
            "Planification d'entretiens"
        ]
    }

@app.get("/api/v1/status", tags=["üè† Accueil"], summary="Statut de l'API v1")
async def api_status():
    """Statut d√©taill√© de l'API v1 avec tous les modules disponibles"""
    return {
        "api_version": "v1",
        "status": "active",
        "modules": {
            "authentification": {
                "endpoint": "/api/v1/auth",
                "status": "active",
                "endpoints_count": 4
            },
            "utilisateurs": {
                "endpoint": "/api/v1/users",
                "status": "active", 
                "endpoints_count": 4
            },
            "offres_emploi": {
                "endpoint": "/api/v1/jobs",
                "status": "active",
                "endpoints_count": 3
            },
            "candidatures": {
                "endpoint": "/api/v1/applications",
                "status": "active",
                "endpoints_count": 3
            },
            "evaluations": {
                "endpoint": "/api/v1/evaluations",
                "status": "active",
                "endpoints_count": 6
            },
            "notifications": {
                "endpoint": "/api/v1/notifications",
                "status": "active",
                "endpoints_count": 4
            },
            "entretiens": {
                "endpoint": "/api/v1/interviews",
                "status": "active",
                "endpoints_count": 5
            }
        },
        "total_endpoints": 29
    }

# ============================================================================
# üîê MODULE AUTHENTIFICATION
# ============================================================================

@app.post("/api/v1/auth/login", 
          response_model=TokenResponse, 
          tags=["üîê Authentification"],
          summary="Connexion utilisateur",
          description="Authentifier un utilisateur avec son email et mot de passe. Retourne un token JWT pour les requ√™tes suivantes.")
async def login(
    login_data: LoginRequest,
    db: AsyncSession = Depends(get_async_db_session)
):
    """Connexion d'un utilisateur avec email et mot de passe"""
    try:
        auth_service = AuthService(db)
        
        # Authentifier l'utilisateur
        user = await auth_service.authenticate_user(login_data.email, login_data.password)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email ou mot de passe incorrect",
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # Cr√©er les tokens
        tokens = await auth_service.create_access_token(user)
        
        logger.info("Connexion r√©ussie", user_id=str(user.id), email=user.email)
        return tokens
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur lors de la connexion", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur interne du serveur"
        )

@app.post("/api/v1/auth/signup", 
          response_model=UserResponse, 
          tags=["üîê Authentification"],
          summary="Inscription utilisateur",
          description="Cr√©er un nouveau compte utilisateur. Par d√©faut, le r√¥le est 'candidate'.")
async def signup(
    signup_data: SignupRequest,
    db: AsyncSession = Depends(get_async_db_session)
):
    """Inscription d'un nouvel utilisateur"""
    try:
        auth_service = AuthService(db)
        
        # Cr√©er l'utilisateur
        user = await auth_service.create_user(signup_data)
        
        logger.info("Inscription r√©ussie", user_id=str(user.id), email=user.email)
        return UserResponse.from_orm(user)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur lors de l'inscription", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur interne du serveur"
        )

@app.get("/api/v1/auth/me", 
         response_model=UserResponse, 
         tags=["üîê Authentification"],
         summary="Profil utilisateur connect√©",
         description="R√©cup√©rer les informations du profil de l'utilisateur actuellement connect√©.")
async def get_current_user_profile(
    current_user: User = Depends(get_current_active_user)
):
    """Obtenir le profil de l'utilisateur actuellement connect√©"""
    return UserResponse.from_orm(current_user)

@app.post("/api/v1/auth/logout", 
          tags=["üîê Authentification"],
          summary="D√©connexion",
          description="D√©connexion de l'utilisateur. Le token JWT reste valide jusqu'√† expiration.")
async def logout():
    """D√©connexion de l'utilisateur"""
    return {"message": "D√©connexion r√©ussie"}

# ============================================================================
# üë• MODULE UTILISATEURS
# ============================================================================

@app.get("/api/v1/users/", 
         response_model=List[UserResponse], 
         tags=["üë• Utilisateurs"],
         summary="Liste des utilisateurs",
         description="R√©cup√©rer la liste de tous les utilisateurs. **R√©serv√© aux administrateurs.**")
async def get_users(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_admin_user)
):
    """R√©cup√©rer la liste des utilisateurs (admin seulement)"""
    try:
        user_service = UserService(db)
        users = await user_service.get_users(skip=skip, limit=limit)
        return [UserResponse.from_orm(user) for user in users]
    except Exception as e:
        logger.error("Erreur r√©cup√©ration utilisateurs", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des utilisateurs"
        )

@app.get("/api/v1/users/me", 
         response_model=UserResponse, 
         tags=["üë• Utilisateurs"],
         summary="Mon profil",
         description="R√©cup√©rer les informations de votre propre profil utilisateur.")
async def get_my_profile(
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√©rer le profil de l'utilisateur connect√©"""
    try:
        return UserResponse.from_orm(current_user)
    except Exception as e:
        logger.error("Erreur r√©cup√©ration profil", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration du profil"
        )

@app.get("/api/v1/users/{user_id}", 
         response_model=UserResponse, 
         tags=["üë• Utilisateurs"],
         summary="D√©tails d'un utilisateur",
         description="R√©cup√©rer les d√©tails d'un utilisateur sp√©cifique. Vous pouvez voir votre propre profil ou les profils si vous √™tes admin.")
async def get_user(
    user_id: UUID,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√©rer les d√©tails d'un utilisateur"""
    try:
        user_service = UserService(db)
        user = await user_service.get_user_by_id(user_id)
        
        if not user:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Utilisateur non trouv√©"
            )
        
        # V√©rifier les permissions (utilisateur peut voir son propre profil ou admin)
        if current_user.id != user_id and current_user.role != "admin":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Pas d'autorisation pour voir ce profil"
            )
        
        return UserResponse.from_orm(user)
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur r√©cup√©ration utilisateur", error=str(e), user_id=str(user_id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration de l'utilisateur"
        )

@app.put("/api/v1/users/me", 
         response_model=UserResponse, 
         tags=["üë• Utilisateurs"],
         summary="Mettre √† jour mon profil",
         description="Modifier les informations de votre propre profil utilisateur.")
async def update_my_profile(
    user_data: UserUpdate,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_active_user)
):
    """Mettre √† jour le profil de l'utilisateur connect√©"""
    try:
        user_service = UserService(db)
        updated_user = await user_service.update_user(current_user.id, user_data)
        return UserResponse.from_orm(updated_user)
    except Exception as e:
        logger.error("Erreur mise √† jour profil", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la mise √† jour du profil"
        )

# ============================================================================
# üíº MODULE OFFRES D'EMPLOI
# ============================================================================

@app.get("/api/v1/jobs/", 
         response_model=List[JobOfferResponse], 
         tags=["üíº Offres d'emploi"],
         summary="Liste des offres d'emploi",
         description="R√©cup√©rer la liste de toutes les offres d'emploi disponibles. Possibilit√© de filtrer par statut.")
async def get_job_offers(
    skip: int = 0,
    limit: int = 100,
    status: Optional[str] = None,
    db: AsyncSession = Depends(get_async_db_session)
):
    """R√©cup√©rer la liste des offres d'emploi"""
    try:
        job_service = JobOfferService(db)
        job_offers = await job_service.get_job_offers(skip=skip, limit=limit, status=status)
        return [JobOfferResponse.from_orm(job) for job in job_offers]
    except Exception as e:
        logger.error("Erreur r√©cup√©ration offres d'emploi", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des offres d'emploi"
        )

@app.post("/api/v1/jobs/", 
          response_model=JobOfferResponse, 
          tags=["üíº Offres d'emploi"],
          summary="Cr√©er une offre d'emploi",
          description="Cr√©er une nouvelle offre d'emploi. **R√©serv√© aux recruteurs et administrateurs.**")
async def create_job_offer(
    job_data: JobOfferCreate,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_recruiter_user)
):
    """Cr√©er une nouvelle offre d'emploi"""
    try:
        job_service = JobOfferService(db)
        
        # Ajouter l'ID du recruteur
        job_data.recruiter_id = current_user.id
        
        job_offer = await job_service.create_job_offer(job_data)
        return JobOfferResponse.from_orm(job_offer)
    except Exception as e:
        logger.error("Erreur cr√©ation offre d'emploi", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la cr√©ation de l'offre d'emploi"
        )

@app.get("/api/v1/jobs/{job_id}", 
         response_model=JobOfferResponse, 
         tags=["üíº Offres d'emploi"],
         summary="D√©tails d'une offre d'emploi",
         description="R√©cup√©rer les d√©tails complets d'une offre d'emploi sp√©cifique.")
async def get_job_offer(
    job_id: UUID,
    db: AsyncSession = Depends(get_async_db_session)
):
    """R√©cup√©rer les d√©tails d'une offre d'emploi"""
    try:
        job_service = JobOfferService(db)
        job_offer = await job_service.get_job_offer(job_id)
        
        if not job_offer:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Offre d'emploi non trouv√©e"
            )
        
        return JobOfferResponse.from_orm(job_offer)
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur r√©cup√©ration offre d'emploi", error=str(e), job_id=str(job_id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration de l'offre d'emploi"
        )

# ============================================================================
# üìù MODULE CANDIDATURES
# ============================================================================

@app.get("/api/v1/applications/", 
         response_model=List[ApplicationResponse], 
         tags=["üìù Candidatures"],
         summary="Liste des candidatures",
         description="R√©cup√©rer la liste des candidatures. Les candidats voient leurs propres candidatures, les recruteurs voient toutes les candidatures.")
async def get_applications(
    skip: int = 0,
    limit: int = 100,
    candidate_id: Optional[UUID] = None,
    job_offer_id: Optional[UUID] = None,
    status: Optional[str] = None,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√©rer la liste des candidatures"""
    try:
        application_service = ApplicationService(db)
        
        # Si c'est un candidat, il ne peut voir que ses propres candidatures
        if current_user.role == "candidate":
            candidate_id = current_user.id
        
        applications = await application_service.get_applications(
            skip=skip, 
            limit=limit, 
            candidate_id=candidate_id,
            job_offer_id=job_offer_id,
            status=status
        )
        return [ApplicationResponse.from_orm(app) for app in applications]
    except Exception as e:
        logger.error("Erreur r√©cup√©ration candidatures", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des candidatures"
        )

@app.post("/api/v1/applications/", 
          response_model=ApplicationResponse, 
          tags=["üìù Candidatures"],
          summary="Cr√©er une candidature",
          description="Soumettre une nouvelle candidature pour une offre d'emploi.")
async def create_application(
    application_data: ApplicationCreate,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_active_user)
):
    """Cr√©er une nouvelle candidature"""
    try:
        application_service = ApplicationService(db)
        
        # Ajouter l'ID du candidat
        application_data.candidate_id = current_user.id
        
        application = await application_service.create_application(application_data)
        return ApplicationResponse.from_orm(application)
    except Exception as e:
        logger.error("Erreur cr√©ation candidature", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la cr√©ation de la candidature"
        )

@app.get("/api/v1/applications/{application_id}", 
         response_model=ApplicationResponse, 
         tags=["üìù Candidatures"],
         summary="D√©tails d'une candidature",
         description="R√©cup√©rer les d√©tails complets d'une candidature sp√©cifique.")
async def get_application(
    application_id: UUID,
    db: AsyncSession = Depends(get_async_db_session),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√©rer les d√©tails d'une candidature"""
    try:
        application_service = ApplicationService(db)
        application = await application_service.get_application(application_id)
        
        if not application:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Candidature non trouv√©e"
            )
        
        # V√©rifier les permissions
        if (current_user.role == "candidate" and application.candidate_id != current_user.id) and \
           (current_user.role not in ["recruiter", "admin"]):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Pas d'autorisation pour voir cette candidature"
            )
        
        return ApplicationResponse.from_orm(application)
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur r√©cup√©ration candidature", error=str(e), application_id=str(application_id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration de la candidature"
        )

# ============================================================================
# üìä MODULE √âVALUATIONS (Placeholders)
# ============================================================================

@app.get("/api/v1/evaluations/", tags=["üìä √âvaluations"], summary="Liste des √©valuations")
async def get_evaluations():
    """R√©cup√©rer la liste des √©valuations"""
    return {"message": "Module √©valuations - √Ä impl√©menter"}

@app.get("/api/v1/evaluations/protocol1/", tags=["üìä √âvaluations"], summary="√âvaluations Protocole 1")
async def get_protocol1_evaluations():
    """R√©cup√©rer les √©valuations du Protocole 1"""
    return {"message": "√âvaluations Protocole 1 - √Ä impl√©menter"}

@app.get("/api/v1/evaluations/protocol2/", tags=["üìä √âvaluations"], summary="√âvaluations Protocole 2")
async def get_protocol2_evaluations():
    """R√©cup√©rer les √©valuations du Protocole 2"""
    return {"message": "√âvaluations Protocole 2 - √Ä impl√©menter"}

@app.post("/api/v1/evaluations/protocol1/", tags=["üìä √âvaluations"], summary="Cr√©er √©valuation Protocole 1")
async def create_protocol1_evaluation():
    """Cr√©er une √©valuation Protocole 1"""
    return {"message": "Cr√©ation √©valuation Protocole 1 - √Ä impl√©menter"}

@app.post("/api/v1/evaluations/protocol2/", tags=["üìä √âvaluations"], summary="Cr√©er √©valuation Protocole 2")
async def create_protocol2_evaluation():
    """Cr√©er une √©valuation Protocole 2"""
    return {"message": "Cr√©ation √©valuation Protocole 2 - √Ä impl√©menter"}

@app.put("/api/v1/evaluations/protocol1/{evaluation_id}", tags=["üìä √âvaluations"], summary="Mettre √† jour √©valuation Protocole 1")
async def update_protocol1_evaluation(evaluation_id: UUID):
    """Mettre √† jour une √©valuation Protocole 1"""
    return {"message": f"Mise √† jour √©valuation Protocole 1 {evaluation_id} - √Ä impl√©menter"}

# ============================================================================
# üîî MODULE NOTIFICATIONS (Placeholders)
# ============================================================================

@app.get("/api/v1/notifications/", tags=["üîî Notifications"], summary="Liste des notifications")
async def get_notifications():
    """R√©cup√©rer la liste des notifications"""
    return {"message": "Module notifications - √Ä impl√©menter"}

@app.get("/api/v1/notifications/unread", tags=["üîî Notifications"], summary="Notifications non lues")
async def get_unread_notifications():
    """R√©cup√©rer les notifications non lues"""
    return {"message": "Notifications non lues - √Ä impl√©menter"}

@app.put("/api/v1/notifications/{notification_id}/read", tags=["üîî Notifications"], summary="Marquer comme lue")
async def mark_notification_read(notification_id: UUID):
    """Marquer une notification comme lue"""
    return {"message": f"Notification {notification_id} marqu√©e comme lue - √Ä impl√©menter"}

@app.put("/api/v1/notifications/read-all", tags=["üîî Notifications"], summary="Marquer toutes comme lues")
async def mark_all_notifications_read():
    """Marquer toutes les notifications comme lues"""
    return {"message": "Toutes les notifications marqu√©es comme lues - √Ä impl√©menter"}

# ============================================================================
# üéØ MODULE ENTRETIENS (Placeholders)
# ============================================================================

@app.get("/api/v1/interviews/", tags=["üéØ Entretiens"], summary="Liste des entretiens")
async def get_interviews():
    """R√©cup√©rer la liste des entretiens"""
    return {"message": "Module entretiens - √Ä impl√©menter"}

@app.post("/api/v1/interviews/", tags=["üéØ Entretiens"], summary="Cr√©er un entretien")
async def create_interview():
    """Cr√©er un nouvel entretien"""
    return {"message": "Cr√©ation entretien - √Ä impl√©menter"}

@app.get("/api/v1/interviews/{interview_id}", tags=["üéØ Entretiens"], summary="D√©tails d'un entretien")
async def get_interview(interview_id: UUID):
    """R√©cup√©rer les d√©tails d'un entretien"""
    return {"message": f"D√©tails entretien {interview_id} - √Ä impl√©menter"}

@app.put("/api/v1/interviews/{interview_id}", tags=["üéØ Entretiens"], summary="Mettre √† jour un entretien")
async def update_interview(interview_id: UUID):
    """Mettre √† jour un entretien"""
    return {"message": f"Mise √† jour entretien {interview_id} - √Ä impl√©menter"}

@app.get("/api/v1/interviews/slots/", tags=["üéØ Entretiens"], summary="Cr√©neaux disponibles")
async def get_interview_slots():
    """R√©cup√©rer les cr√©neaux d'entretien disponibles"""
    return {"message": "Cr√©neaux d'entretien - √Ä impl√©menter"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
