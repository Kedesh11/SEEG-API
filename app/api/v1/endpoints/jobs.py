"""
Endpoints de gestion des offres d'emploi
"""
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from uuid import UUID
import structlog

from app.db.database import get_db
from app.schemas.job import JobOfferResponse, JobOfferCreate, JobOfferUpdate
from app.services.job import JobOfferService
from app.core.dependencies import get_current_active_user, get_current_recruiter_user
from app.models.user import User
from app.core.exceptions import NotFoundError, ValidationError, BusinessLogicError
from app.core.config.config import settings

logger = structlog.get_logger(__name__)
router = APIRouter(
    tags=["üíº Offres d'emploi"],)


def safe_log(level: str, message: str, **kwargs):
    """Log avec gestion d'erreur pour √©viter les probl√®mes de handler."""
    try:
        getattr(logger, level)(message, **kwargs)
    except (TypeError, AttributeError):
        print(f"{level.upper()}: {message} - {kwargs}")

@router.get(
    "/",
    response_model=List[JobOfferResponse],
    summary="Liste des offres d'emploi",
    description="R√©cup√©rer toutes les offres avec leurs questions MTP et filtrage intelligent"
)
async def get_job_offers(
    skip: int = Query(0, ge=0, description="Nombre d'elements a ignorer"),
    limit: int = Query(100, ge=1, le=1000, description="Nombre d'elements a retourner"),
    status_filter: Optional[str] = Query(None, description="Filtrer par statut"),
    current_user: User = Depends(get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    """
    R√©cup√©rer la liste des offres d'emploi avec FILTRAGE AUTOMATIQUE.
    
    **Donn√©es retourn√©es** :
    - Toutes les informations des offres (titre, description, localisation, etc.)
    - Les 3 questions MTP pour chaque offre (question_metier, question_talent, question_paradigme)
    - Les m√©tadonn√©es (dates, statut, etc.)
    
    **Filtrage intelligent selon le type de candidat** :
    - **Candidat INTERNE** (employ√© SEEG avec matricule) : Voit TOUTES les offres
    - **Candidat EXTERNE** (sans matricule) : Voit UNIQUEMENT les offres accessibles (`offer_status='tous'` ou `'externe'`)
    - **Recruteur/Admin** : Voit TOUTES les offres
    
    **Pagination** : Utilisez `skip` et `limit` pour paginer les r√©sultats
    """
    try:
        job_service = JobOfferService(db)
        job_offers = await job_service.get_job_offers(skip=skip, limit=limit, status=status_filter, current_user=current_user)
        safe_log("info", "Offres d'emploi recuperees", 
                count=len(job_offers),
                user_type="interne" if bool(current_user.is_internal_candidate) else "externe",
                role=str(current_user.role))
        return [JobOfferResponse.from_orm(job) for job in job_offers]
    except Exception as e:
        safe_log("error", "Erreur recuperation offres d'emploi", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des offres d'emploi"
        )

@router.post(
    "/",
    response_model=JobOfferResponse,
    status_code=status.HTTP_201_CREATED,  # Standard REST : 201 pour cr√©ation de ressource
    summary="Cr√©er une offre d'emploi",
    description="Cr√©er une nouvelle offre d'emploi (interne ou externe) avec questions MTP optionnelles"
)
async def create_job_offer(
    job_data: JobOfferCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_recruiter_user)
):
    """
    Cr√©er une nouvelle offre d'emploi avec support complet des questions MTP.
    
    **Questions MTP (M√©tier, Talent, Paradigme)** - Optionnelles :
    - `question_metier` : √âvalue les comp√©tences techniques et op√©rationnelles
    - `question_talent` : √âvalue les aptitudes personnelles et le potentiel
    - `question_paradigme` : √âvalue la vision, les valeurs et la compatibilit√© culturelle
    
    **Accessibilit√©** :
    - `offer_status='interne'` : R√©serv√©e aux candidats internes uniquement
    - `offer_status='externe'` : R√©serv√©e aux candidats externes uniquement
    - `offer_status='tous'` : Accessible √† tous (internes + externes)
    
    **Permissions** : Accessible uniquement aux recruteurs et administrateurs
    """
    try:
        # üî∑ √âTAPE 1: Initialisation
        safe_log("info", "üöÄ D√âBUT cr√©ation offre d'emploi", 
                recruiter_id=str(current_user.id),
                title=job_data.title,
                location=job_data.location,
                offer_status=job_data.offer_status,
                has_questions_mtp=job_data.questions_mtp is not None)
        
        job_service = JobOfferService(db)
        
        safe_log("debug", "‚úÖ Service initialis√© avec recruteur ID", recruiter_id=str(current_user.id))
        
        # üî∑ √âTAPE 2: Cr√©ation en m√©moire
        safe_log("debug", "üìù Cr√©ation offre en m√©moire...")
        job_offer = await job_service.create_job_offer(job_data, current_user.id)
        safe_log("info", "‚úÖ Offre cr√©√©e en m√©moire", job_id=str(job_offer.id))
        
        # üî∑ √âTAPE 3: Persistence en base de donn√©es
        safe_log("debug", "üíæ Commit transaction en cours...")
        await db.commit()
        safe_log("info", "‚úÖ Transaction committ√©e avec succ√®s")
        
        await db.refresh(job_offer)
        safe_log("debug", "‚úÖ Objet rafra√Æchi depuis la BDD")
        
        safe_log("info", "üéâ SUCC√àS cr√©ation offre d'emploi compl√®te", 
                job_id=str(job_offer.id), 
                recruiter_id=str(current_user.id),
                title=job_offer.title,
                department=job_offer.department,
                offer_status=job_offer.offer_status)
        return JobOfferResponse.from_orm(job_offer)
        
    except ValidationError as e:
        error_msg = str(e)
        safe_log("warning", "‚ùå VALIDATION √âCHOU√âE - Cr√©ation offre", 
                 error=error_msg,
                 error_type="ValidationError",
                 recruiter_id=str(current_user.id),
                 title=job_data.title if job_data else "N/A")
        await db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=error_msg)
    except Exception as e:
        # Log d√©taill√© avec traceback
        import traceback
        error_msg = f"{type(e).__name__}: {str(e)}"
        error_traceback = traceback.format_exc()
        safe_log("error", "üî• ERREUR CRITIQUE - Cr√©ation offre d'emploi", 
                error=error_msg,
                error_type=type(e).__name__,
                traceback=error_traceback,
                recruiter_id=str(current_user.id),
                title=job_data.title if job_data else "N/A")
        await db.rollback()
        # En mode debug ou development, retourner plus de d√©tails
        import os
        if os.getenv("DEBUG", "false").lower() == "true" or os.getenv("ENVIRONMENT", "production") == "development":
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Erreur interne: {error_msg}"
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erreur lors de la cr√©ation de l'offre d'emploi"
            )

@router.get(
    "/{job_id}",
    response_model=JobOfferResponse,
    summary="D√©tails d'une offre d'emploi",
    description="R√©cup√©rer tous les d√©tails d'une offre incluant les questions MTP"
)
async def get_job_offer(
    job_id: UUID,
    current_user: User = Depends(get_current_active_user),
    db: AsyncSession = Depends(get_db)
):
    """
    R√©cup√©rer les d√©tails complets d'une offre d'emploi.
    
    **Informations retourn√©es** :
    - Toutes les informations de l'offre (titre, description, localisation, etc.)
    - Les 3 questions MTP si d√©finies (question_metier, question_talent, question_paradigme)
    - Les m√©tadonn√©es (dates de cr√©ation/modification, statut, etc.)
    
    **Permissions** : Accessible √† tous les utilisateurs authentifi√©s
    
    **Filtrage automatique** : Les candidats externes ne verront que les offres avec `offer_status='tous'` ou `'externe'`
    """
    try:
        job_service = JobOfferService(db)
        job_offer = await job_service.get_job_offer_by_id(job_id)
        
        if not job_offer:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Offre d'emploi non trouv√©e"
            )
        
        return JobOfferResponse.from_orm(job_offer)
    except HTTPException:
        raise
    except Exception as e:
        safe_log("error", "Erreur r√©cup√©ration offre d'emploi", error=str(e), job_id=str(job_id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration de l'offre d'emploi"
        )

@router.put(
    "/{job_id}",
    response_model=JobOfferResponse,
    summary="Mettre √† jour une offre d'emploi",
    description="Modifier une offre existante, y compris ses questions MTP"
)
async def update_job_offer(
    job_id: UUID,
    job_data: JobOfferUpdate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_recruiter_user)
):
    """
    Mettre √† jour une offre d'emploi existante.
    
    **Champs modifiables** :
    - Toutes les informations de l'offre (titre, description, localisation, etc.)
    - Les questions MTP individuellement ou ensemble :
      - `question_metier`
      - `question_talent`  
      - `question_paradigme`
    - Le statut de l'offre (active, closed, etc.)
    - L'accessibilit√© (`offer_status`: 'tous', 'interne', 'externe')
    
    **Permissions** : Seul le recruteur propri√©taire ou un administrateur peut modifier l'offre
    
    **Note** : Vous pouvez mettre √† jour uniquement les champs que vous souhaitez modifier
    """
    try:
        # üî∑ √âTAPE 1: Initialisation
        update_fields = job_data.dict(exclude_unset=True)
        safe_log("info", "üöÄ D√âBUT mise √† jour offre d'emploi", 
                job_id=str(job_id),
                user_id=str(current_user.id),
                user_role=current_user.role,
                fields_to_update=list(update_fields.keys()))
        
        job_service = JobOfferService(db)
        
        # üî∑ √âTAPE 2: V√©rification existence et permissions
        safe_log("debug", "üîç V√©rification existence offre...")
        job_offer = await job_service.get_job_offer_by_id(job_id)
        if not job_offer:
            safe_log("warning", "‚ùå Offre non trouv√©e", job_id=str(job_id))
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Offre d'emploi non trouv√©e"
            )
        safe_log("debug", "‚úÖ Offre trouv√©e", title=job_offer.title)
        
        safe_log("debug", "üîê V√©rification permissions...")
        if job_offer.recruiter_id != current_user.id and str(current_user.role) != "admin":
            safe_log("warning", "‚ùå Permissions insuffisantes", 
                     job_recruiter_id=str(job_offer.recruiter_id),
                     current_user_id=str(current_user.id))
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Pas d'autorisation pour modifier cette offre d'emploi"
            )
        safe_log("debug", "‚úÖ Permissions valid√©es")
        
        # üî∑ √âTAPE 3: Mise √† jour
        safe_log("debug", "üìù Application des modifications...")
        updated_job = await job_service.update_job_offer(job_id, job_data)
        safe_log("info", "‚úÖ Modifications appliqu√©es en m√©moire")
        
        # üî∑ √âTAPE 4: Persistence en base de donn√©es
        safe_log("debug", "üíæ Commit transaction en cours...")
        await db.commit()
        safe_log("info", "‚úÖ Transaction committ√©e avec succ√®s")
        
        await db.refresh(updated_job)
        safe_log("debug", "‚úÖ Objet rafra√Æchi depuis la BDD")
        
        safe_log("info", "üéâ SUCC√àS mise √† jour offre d'emploi compl√®te", 
                job_id=str(job_id), 
                recruiter_id=str(current_user.id),
                fields_updated=list(update_fields.keys()))
        return JobOfferResponse.from_orm(updated_job)
    except HTTPException:
        # Relancer les HTTPExceptions (d√©j√† logu√©es)
        raise
    except ValidationError as e:
        error_msg = str(e)
        safe_log("warning", "‚ùå VALIDATION √âCHOU√âE - Mise √† jour offre", 
                 error=error_msg,
                 error_type="ValidationError",
                 job_id=str(job_id),
                 user_id=str(current_user.id))
        await db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=error_msg)
    except Exception as e:
        # Log d√©taill√© avec traceback
        import traceback
        error_msg = f"{type(e).__name__}: {str(e)}"
        error_traceback = traceback.format_exc()
        safe_log("error", "üî• ERREUR CRITIQUE - Mise √† jour offre d'emploi", 
                error=error_msg,
                error_type=type(e).__name__,
                traceback=error_traceback,
                job_id=str(job_id),
                user_id=str(current_user.id))
        await db.rollback()
        # En mode debug ou development, retourner plus de d√©tails
        import os
        if os.getenv("DEBUG", "false").lower() == "true" or os.getenv("ENVIRONMENT", "production") == "development":
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Erreur interne: {error_msg}"
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erreur lors de la mise √† jour de l'offre d'emploi"
            )

@router.delete("/{job_id}", summary="Supprimer une offre d'emploi")
async def delete_job_offer(
    job_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_recruiter_user)
):
    """Supprimer une offre d'emploi"""
    try:
        job_service = JobOfferService(db)
        
        # Verifierfier que l'offre appartient au recruteur
        job_offer = await job_service.get_job_offer_by_id(job_id)
        if not job_offer:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Offre d'emploi non trouv√©e"
            )
        
        if job_offer.recruiter_id != current_user.id and str(current_user.role) != "admin":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Pas d'autorisation pour supprimer cette offre d'emploi"
            )
        
        success = await job_service.delete_job_offer(job_id)
        
        # ‚úÖ Commit explicite pour persister la suppression
        await db.commit()
        
        if success:
            safe_log("info", "Offre d'emploi supprim√©e", job_id=str(job_id), recruiter_id=str(current_user.id))
            return {"message": "Offre d'emploi supprim√©e avec succ√®s"}
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erreur lors de la suppression de l'offre d'emploi"
            )
    except HTTPException:
        raise
    except Exception as e:
        safe_log("error", "Erreur suppression offre d'emploi", error=str(e), job_id=str(job_id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la suppression de l'offre d'emploi"
        )

@router.get("/{job_id}/applications", response_model=JobOfferResponse, summary="Candidatures d'une offre")
async def get_job_offer_applications(
    job_id: UUID,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_recruiter_user)
):
    """R√©cup√©rer les candidatures d'une offre d'emploi"""
    try:
        job_service = JobOfferService(db)
        
        # V√©rifier que l'offre appartient au recruteur
        job_offer = await job_service.get_job_offer_by_id(job_id)
        if not job_offer:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Offre d'emploi non trouv√©e"
            )
        
        if job_offer.recruiter_id != current_user.id and str(current_user.role) != "admin":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Pas d'autorisation pour voir les candidatures de cette offre"
            )
        
        # Utiliser l'offre d√©j√† r√©cup√©r√©e
        job_with_applications = job_offer
        
        if not job_with_applications:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Offre d'emploi non trouve"
            )
        
        # Type assertion pour satisfaire le linter
        applications_count = len(getattr(job_with_applications, 'applications', []))
        safe_log("info", "Candidatures r√©cup√©r√©es pour offre", job_id=str(job_id), count=applications_count)
        return JobOfferResponse.from_orm(job_with_applications)
        
    except HTTPException:
        raise
    except Exception as e:
        safe_log("error", "Erreur r√©cup√©ration candidatures", error=str(e), job_id=str(job_id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des candidatures"
        )

@router.get("/recruiter/my-jobs", response_model=List[JobOfferResponse], summary="Mes offres d'emploi")
async def get_my_job_offers(
    skip: int = Query(0, ge=0, description="Nombre d'√©l√©ments √† ignorer"),
    limit: int = Query(100, ge=1, le=1000, description="Nombre d'√©l√©ments √† retourner"),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_recruiter_user)
):
    """R√©cup√©rer les offres d'emploi du recruteur connect√©"""
    try:
        job_service = JobOfferService(db)
        # R√©cup√©rer toutes les offres puis filtrer par recruteur
        all_jobs = await job_service.get_job_offers(
            skip=skip, 
            limit=limit,
            current_user=current_user
        )
        # Filtrer pour ne garder que les offres du recruteur
        job_offers = [job for job in all_jobs if str(job.recruiter_id) == str(current_user.id)]
        safe_log("info", "Mes offres d'emploi r√©cup√©r√©es", recruiter_id=str(current_user.id), count=len(job_offers))
        return [JobOfferResponse.from_orm(job) for job in job_offers]
    except Exception as e:
        safe_log("error", "Erreur r√©cup√©ration mes offres d'emploi", error=str(e), recruiter_id=str(current_user.id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration de vos offres d'emploi"
        )

@router.get("/recruiter/statistics", summary="Statistiques du recruteur")
async def get_recruiter_statistics(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_recruiter_user)
):
    """R√©cup√©rer les statistiques du recruteur connect√©"""
    try:
        job_service = JobOfferService(db)
        
        # R√©cup√©rer le nombre total d'offres du recruteur
        total_jobs = await job_service.get_job_offers_count(current_user=current_user)
        
        # Statistiques simples pour le moment
        stats = {
            "recruiter_id": str(current_user.id),
            "total_offers": total_jobs,
            "message": "Statistiques de base (version simplifi√©e)"
        }
        
        safe_log("info", "Statistiques recruteur r√©cup√©r√©es", recruiter_id=str(current_user.id))
        return stats
    except Exception as e:
        safe_log("error", "Erreur r√©cup√©ration statistiques", error=str(e), recruiter_id=str(current_user.id))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des statistiques"
        )
