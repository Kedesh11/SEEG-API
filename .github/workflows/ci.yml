name: CI - Tests et QualitÃ©

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: seeg_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: seeg_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Create .env.test
      run: |
        cat > .env.test << EOF
        ENVIRONMENT=test
        DEBUG=false
        DATABASE_URL=postgresql+asyncpg://seeg_test:test_password@localhost:5432/seeg_test_db
        SECRET_KEY=test-secret-key-for-ci-only-do-not-use-in-production
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        REFRESH_TOKEN_EXPIRE_DAYS=7
        FRONTEND_URL=http://localhost:3000
        EOF
    
    - name: Run tests with coverage
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql+asyncpg://seeg_test:test_password@localhost:5432/seeg_test_db
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      run: |
        coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
        echo "Coverage: ${coverage}%"

  lint:
    name: Linting et QualitÃ© du Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: black --check app/ tests/
      continue-on-error: true
    
    - name: Check imports with isort
      run: isort --check-only app/ tests/
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  security:
    name: Analyse de SÃ©curitÃ©
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install safety
      run: pip install safety bandit
    
    - name: Check for known security vulnerabilities
      run: safety check --json
      continue-on-error: true
    
    - name: Run Bandit security scanner
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  build-summary:
    name: RÃ©sumÃ© de Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## ðŸŽ‰ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Linting**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY

