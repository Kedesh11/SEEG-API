name: CD - D√©ploiement Azure

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: seeg-api-prod
  PYTHON_VERSION: '3.12'

jobs:
  deploy-staging:
    name: D√©ploiement Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    environment:
      name: staging
      url: https://seeg-api-staging.azurewebsites.net
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests before deploy
      run: |
        pip install pytest pytest-asyncio
        pytest -v
    
    - name: Deploy to Azure Web App (Staging)
      uses: azure/webapps-deploy@v3
      with:
        app-name: seeg-api-staging
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: .
    
    - name: Health Check
      run: |
        sleep 30
        curl -f https://seeg-api-staging.azurewebsites.net/health || exit 1

  deploy-production:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://www.seeg-api.com
    needs: []
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run full test suite
      run: |
        pip install pytest pytest-cov pytest-asyncio
        pytest --cov=app -v
    
    - name: Create release artifact
      run: |
        mkdir -p release
        cp -r app/ requirements.txt release/
        tar -czf release.tar.gz release/
    
    - name: Deploy to Azure Web App (Production)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD }}
        package: .
    
    - name: Health Check Production
      run: |
        sleep 60
        curl -f https://www.seeg-api.com/health || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ D√©ploiement en production r√©ussi !"
        echo "Version: ${GITHUB_REF#refs/tags/}"
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ùå D√©ploiement √©chou√©, rollback n√©cessaire"
        # Ajouter logique de rollback ici

  database-migration:
    name: Migration Base de Donn√©es
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-db
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Alembic
      run: |
        python -m pip install --upgrade pip
        pip install alembic asyncpg psycopg2-binary
        pip install -r requirements.txt
    
    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
      run: |
        alembic upgrade head
      continue-on-error: false
    
    - name: Verify migration
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
      run: |
        alembic current

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        echo "üìß Envoi de notification de d√©ploiement"
        # Int√©grer avec Slack, Email, etc.

