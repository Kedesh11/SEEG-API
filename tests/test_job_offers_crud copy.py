"""
Test complet des routes CRUD des offres d'emploi
Teste la cr√©ation, mise √† jour, r√©cup√©ration et validation des offres avec questions MTP
"""
import requests
import json
from datetime import datetime, timedelta

BASE_URL = "http://localhost:8000/api/v1"

def test_job_offers_crud():
    """Tester les op√©rations CRUD sur les offres d'emploi"""
    
    print("="*70)
    print("TEST: CRUD Offres d'Emploi (Cr√©ation & Mise √† Jour)")
    print("="*70)
    
    # Utiliser l'admin existant qui a les droits de recruteur
    admin_email = "sevankedesh11@gmail.com"
    admin_password = "Sevan@Seeg"
    recruiter_token = None
    job_offer_id = None
    
    # ==================== √âTAPE 1: CONNEXION ADMIN (comme recruteur) ====================
    print("\n1Ô∏è‚É£  Connexion de l'admin (avec droits recruteur)...")
    login_data = {
        "username": admin_email,
        "password": admin_password
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    if response.status_code == 200:
        token_data = response.json()
        recruiter_token = token_data.get("access_token")
        user = token_data.get("user")
        recruiter_id = user.get("id")
        print(f"   ‚úÖ Admin connect√© (ID: {recruiter_id}, Role: {user.get('role')})")
    else:
        print(f"   ‚ùå Erreur connexion: {response.status_code}")
        print(f"      {response.text}")
        return False
    
    recruiter_headers = {"Authorization": f"Bearer {recruiter_token}"}
    
    # ==================== √âTAPE 2: CR√âATION OFFRE SANS MTP ====================
    print("\n2Ô∏è‚É£  TEST 1: Cr√©ation d'une offre SANS questions MTP...")
    
    job_data_simple = {
        "title": "D√©veloppeur Backend Python - Test Local",
        "description": "Nous recherchons un d√©veloppeur backend exp√©riment√© pour rejoindre notre √©quipe.",
        "location": "Libreville, Gabon",
        "contract_type": "CDI",
        "department": "IT - D√©veloppement",
        "salary_min": 800000,
        "salary_max": 1200000,
        "requirements": [
            "5+ ans d'exp√©rience en Python",
            "Ma√Ætrise de FastAPI ou Django",
            "Connaissance de PostgreSQL",
            "Exp√©rience avec Docker"
        ],
        "benefits": [
            "Assurance sant√©",
            "Tickets restaurant",
            "T√©l√©travail partiel"
        ],
        "responsibilities": [
            "D√©velopper et maintenir les APIs",
            "Optimiser les performances",
            "Participer aux code reviews"
        ],
        "status": "active",
        "offer_status": "tous",  # Accessible √† tous (internes + externes)
        "application_deadline": (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
        "reporting_line": "CTO",
        "profile": "D√©veloppeur exp√©riment√© avec excellentes comp√©tences techniques",
        "categorie_metier": "Informatique",
        "job_grade": "Cadre"
    }
    
    response = requests.post(
        f"{BASE_URL}/jobs/",
        headers=recruiter_headers,
        json=job_data_simple
    )
    
    if response.status_code == 200:
        result = response.json()
        job_simple = result
        job_simple_id = job_simple.get("id")
        print(f"   ‚úÖ Offre cr√©√©e avec succ√®s (SANS MTP)")
        print(f"   üìÑ ID: {job_simple_id}")
        print(f"   üìù Titre: {job_simple.get('title')}")
        print(f"   üåç Localisation: {job_simple.get('location')}")
        print(f"   üîì Accessibilit√©: {job_simple.get('offer_status')}")
        print(f"   ‚ùì Questions MTP: {job_simple.get('questions_mtp')}")
    else:
        print(f"   ‚ùå √âCHEC cr√©ation: {response.status_code}")
        try:
            print(f"      {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        except:
            print(f"      {response.text[:500]}")
        return False
    
    # ==================== √âTAPE 3: CR√âATION OFFRE AVEC MTP ====================
    print("\n3Ô∏è‚É£  TEST 2: Cr√©ation d'une offre AVEC questions MTP...")
    
    job_data_with_mtp = {
        "title": "Chef de Projet Digital - Test Local",
        "description": "Nous recherchons un chef de projet pour piloter nos initiatives digitales.",
        "location": "Libreville, Gabon",
        "contract_type": "CDI",
        "department": "Digital & Innovation",
        "salary_min": 1200000,
        "salary_max": 1800000,
        "requirements": [
            "7+ ans d'exp√©rience en gestion de projet",
            "Certification PMP ou √©quivalent",
            "Exp√©rience en transformation digitale"
        ],
        "status": "active",
        "offer_status": "interne",  # R√©serv√©e aux internes uniquement
        "application_deadline": (datetime.now() + timedelta(days=45)).strftime("%Y-%m-%d"),
        "profile": "Leader avec vision strat√©gique",
        "categorie_metier": "Management",
        "job_grade": "Cadre Sup√©rieur",
        # Questions MTP envoy√©es comme strings s√©par√©es par des retours √† la ligne
        "question_metier": "D√©crivez votre exp√©rience en gestion de projets agiles\nQuels outils de gestion de projet ma√Ætrisez-vous?",
        "question_talent": "Comment g√©rez-vous les conflits au sein d'une √©quipe?\nQuelle est votre plus grande r√©ussite professionnelle?",
        "question_paradigme": "Quelle est votre vision de la transformation digitale?\nComment vous alignez-vous avec les valeurs d'innovation?"
    }
    
    response = requests.post(
        f"{BASE_URL}/jobs/",
        headers=recruiter_headers,
        json=job_data_with_mtp
    )
    
    if response.status_code == 200:
        result = response.json()
        job_with_mtp = result
        job_offer_id = job_with_mtp.get("id")
        questions_mtp = job_with_mtp.get("questions_mtp")
        
        print(f"   ‚úÖ Offre cr√©√©e avec succ√®s (AVEC MTP)")
        print(f"   üìÑ ID: {job_offer_id}")
        print(f"   üìù Titre: {job_with_mtp.get('title')}")
        print(f"   üîí Accessibilit√©: {job_with_mtp.get('offer_status')}")
        print(f"   ‚ùì Questions MTP pr√©sentes: {questions_mtp is not None}")
        
        if questions_mtp:
            print(f"\n   üìä D√©tail des questions MTP:")
            metier = questions_mtp.get("questions_metier", [])
            talent = questions_mtp.get("questions_talent", [])
            paradigme = questions_mtp.get("questions_paradigme", [])
            print(f"      ‚Ä¢ M√©tier: {len(metier)} question(s)")
            for i, q in enumerate(metier, 1):
                print(f"        {i}. {q[:60]}...")
            print(f"      ‚Ä¢ Talent: {len(talent)} question(s)")
            for i, q in enumerate(talent, 1):
                print(f"        {i}. {q[:60]}...")
            print(f"      ‚Ä¢ Paradigme: {len(paradigme)} question(s)")
            for i, q in enumerate(paradigme, 1):
                print(f"        {i}. {q[:60]}...")
    else:
        print(f"   ‚ùå √âCHEC cr√©ation: {response.status_code}")
        try:
            print(f"      {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        except:
            print(f"      {response.text[:500]}")
        return False
    
    # ==================== √âTAPE 4: R√âCUP√âRATION DE L'OFFRE ====================
    print(f"\n4Ô∏è‚É£  TEST 3: R√©cup√©ration de l'offre cr√©√©e...")
    
    response = requests.get(
        f"{BASE_URL}/jobs/{job_offer_id}",
        headers=recruiter_headers
    )
    
    if response.status_code == 200:
        job_retrieved = response.json()
        print(f"   ‚úÖ Offre r√©cup√©r√©e avec succ√®s")
        print(f"   üìù Titre: {job_retrieved.get('title')}")
        print(f"   üìÖ Cr√©√©e le: {job_retrieved.get('created_at')[:10]}")
        print(f"   ‚úèÔ∏è  Modifi√©e le: {job_retrieved.get('updated_at')[:10]}")
    else:
        print(f"   ‚ùå √âCHEC r√©cup√©ration: {response.status_code}")
        return False
    
    # ==================== √âTAPE 5: MISE √Ä JOUR - MODIFIER LE TITRE ====================
    print(f"\n5Ô∏è‚É£  TEST 4: Mise √† jour du titre de l'offre...")
    
    update_data_title = {
        "title": "Chef de Projet Digital Senior - MISE √Ä JOUR"
    }
    
    response = requests.put(
        f"{BASE_URL}/jobs/{job_offer_id}",
        headers=recruiter_headers,
        json=update_data_title
    )
    
    if response.status_code == 200:
        updated_job = response.json()
        print(f"   ‚úÖ Titre mis √† jour avec succ√®s")
        print(f"   üìù Nouveau titre: {updated_job.get('title')}")
        assert "MISE √Ä JOUR" in updated_job.get('title'), "Le titre n'a pas √©t√© mis √† jour"
    else:
        print(f"   ‚ùå √âCHEC mise √† jour: {response.status_code}")
        try:
            print(f"      {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        except:
            print(f"      {response.text[:500]}")
        return False
    
    # ==================== √âTAPE 6: MISE √Ä JOUR - CHANGER L'ACCESSIBILIT√â ====================
    print(f"\n6Ô∏è‚É£  TEST 5: Changement d'accessibilit√© (interne ‚Üí tous)...")
    
    update_data_status = {
        "offer_status": "tous"
    }
    
    response = requests.put(
        f"{BASE_URL}/jobs/{job_offer_id}",
        headers=recruiter_headers,
        json=update_data_status
    )
    
    if response.status_code == 200:
        updated_job = response.json()
        print(f"   ‚úÖ Accessibilit√© mise √† jour")
        print(f"   üîì Nouvelle accessibilit√©: {updated_job.get('offer_status')}")
        assert updated_job.get('offer_status') == "tous", "L'accessibilit√© n'a pas √©t√© mise √† jour"
    else:
        print(f"   ‚ùå √âCHEC mise √† jour: {response.status_code}")
        return False
    
    # ==================== √âTAPE 7: MISE √Ä JOUR - AJOUTER UNE QUESTION MTP ====================
    print(f"\n7Ô∏è‚É£  TEST 6: Ajout d'une question MTP suppl√©mentaire...")
    
    update_data_mtp = {
        "question_metier": "D√©crivez votre exp√©rience en gestion de projets agiles\nQuels outils de gestion de projet ma√Ætrisez-vous?\nComment mesurez-vous le succ√®s d'un projet?"
    }
    
    response = requests.put(
        f"{BASE_URL}/jobs/{job_offer_id}",
        headers=recruiter_headers,
        json=update_data_mtp
    )
    
    if response.status_code == 200:
        updated_job = response.json()
        questions_mtp = updated_job.get("questions_mtp")
        metier_questions = questions_mtp.get("questions_metier", []) if questions_mtp else []
        
        print(f"   ‚úÖ Questions MTP mises √† jour")
        print(f"   üìä Nombre de questions M√©tier: {len(metier_questions)}")
        if len(metier_questions) >= 3:
            print(f"   ‚úîÔ∏è  3√®me question ajout√©e: {metier_questions[2][:60]}...")
        else:
            print(f"   ‚ö†Ô∏è  La 3√®me question n'a pas √©t√© ajout√©e correctement")
    else:
        print(f"   ‚ùå √âCHEC mise √† jour: {response.status_code}")
        try:
            print(f"      {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        except:
            print(f"      {response.text[:500]}")
        return False
    
    # ==================== √âTAPE 8: MISE √Ä JOUR - MODIFICATION MULTIPLE ====================
    print(f"\n8Ô∏è‚É£  TEST 7: Mise √† jour de plusieurs champs simultan√©ment...")
    
    update_data_multiple = {
        "salary_min": 1500000,
        "salary_max": 2000000,
        "status": "active",
        "location": "Libreville / Port-Gentil, Gabon"
    }
    
    response = requests.put(
        f"{BASE_URL}/jobs/{job_offer_id}",
        headers=recruiter_headers,
        json=update_data_multiple
    )
    
    if response.status_code == 200:
        updated_job = response.json()
        print(f"   ‚úÖ Mise √† jour multiple r√©ussie")
        print(f"   üí∞ Nouveau salaire: {updated_job.get('salary_min'):,} - {updated_job.get('salary_max'):,} FCFA")
        print(f"   üåç Nouvelle localisation: {updated_job.get('location')}")
        print(f"   üìä Statut: {updated_job.get('status')}")
    else:
        print(f"   ‚ùå √âCHEC mise √† jour: {response.status_code}")
        return False
    
    # ==================== √âTAPE 9: LISTE DES OFFRES ====================
    print(f"\n9Ô∏è‚É£  TEST 8: R√©cup√©ration de la liste des offres...")
    
    response = requests.get(
        f"{BASE_URL}/jobs/",
        headers=recruiter_headers
    )
    
    if response.status_code == 200:
        jobs_list = response.json()
        print(f"   ‚úÖ Liste r√©cup√©r√©e: {len(jobs_list)} offre(s)")
        for job in jobs_list[:5]:  # Afficher max 5 offres
            print(f"      ‚Ä¢ {job.get('title')} ({job.get('offer_status')})")
    else:
        print(f"   ‚ùå √âCHEC r√©cup√©ration liste: {response.status_code}")
        return False
    
    # ==================== √âTAPE 10: V√âRIFICATION FINALE ====================
    print(f"\nüîü TEST 9: V√©rification finale de l'offre...")
    
    response = requests.get(
        f"{BASE_URL}/jobs/{job_offer_id}",
        headers=recruiter_headers
    )
    
    if response.status_code == 200:
        final_job = response.json()
        print(f"   ‚úÖ V√©rification finale r√©ussie")
        print(f"\n   üìã √âtat final de l'offre:")
        print(f"      ‚Ä¢ Titre: {final_job.get('title')}")
        print(f"      ‚Ä¢ Localisation: {final_job.get('location')}")
        print(f"      ‚Ä¢ Salaire: {final_job.get('salary_min'):,} - {final_job.get('salary_max'):,} FCFA")
        print(f"      ‚Ä¢ Accessibilit√©: {final_job.get('offer_status')}")
        print(f"      ‚Ä¢ Statut: {final_job.get('status')}")
        
        questions_mtp = final_job.get("questions_mtp")
        if questions_mtp:
            print(f"      ‚Ä¢ Questions MTP:")
            print(f"        - M√©tier: {len(questions_mtp.get('questions_metier', []))} question(s)")
            print(f"        - Talent: {len(questions_mtp.get('questions_talent', []))} question(s)")
            print(f"        - Paradigme: {len(questions_mtp.get('questions_paradigme', []))} question(s)")
    else:
        print(f"   ‚ùå √âCHEC v√©rification: {response.status_code}")
        return False
    
    # ==================== R√âSULTAT FINAL ====================
    print("\n" + "="*70)
    print("‚úÖ TOUS LES TESTS DES OFFRES D'EMPLOI R√âUSSIS")
    print("="*70)
    print(f"\nüìä R√âSUM√â:")
    print(f"   ‚Ä¢ Offre sans MTP cr√©√©e: ‚úÖ")
    print(f"   ‚Ä¢ Offre avec MTP cr√©√©e: ‚úÖ")
    print(f"   ‚Ä¢ R√©cup√©ration d'offre: ‚úÖ")
    print(f"   ‚Ä¢ Mise √† jour titre: ‚úÖ")
    print(f"   ‚Ä¢ Mise √† jour accessibilit√©: ‚úÖ")
    print(f"   ‚Ä¢ Mise √† jour questions MTP: ‚úÖ")
    print(f"   ‚Ä¢ Mise √† jour multiple: ‚úÖ")
    print(f"   ‚Ä¢ Liste des offres: ‚úÖ")
    print(f"   ‚Ä¢ V√©rification finale: ‚úÖ")
    print(f"\n   üéØ ID de l'offre test√©e: {job_offer_id}")
    return True


if __name__ == "__main__":
    success = test_job_offers_crud()
    exit(0 if success else 1)

