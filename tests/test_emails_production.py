"""
Test d'envoi d'emails avec l'API en production Azure
Teste tous les types d'emails : inscription, invitation entretien, reset password, etc.
"""
import requests
import time
from datetime import datetime, timedelta

# URL de l'API en production
BASE_URL = "https://seeg-backend-api.azurewebsites.net/api/v1"

# Credentials admin pour les tests
ADMIN_EMAIL = "sevankedesh11@gmail.com"
ADMIN_PASSWORD = "Sevan@Seeg"

# Email de test pour recevoir les notifications
TEST_EMAIL = "sevan@cnx4-0.com"
TEST_PASSWORD = "Sevan@2025"

def print_section(title):
    """Affiche une section format√©e"""
    print("\n" + "=" * 80)
    print(f"  {title}")
    print("=" * 80)

def print_step(message, success=None):
    """Affiche une √©tape avec son statut"""
    if success is True:
        print(f"‚úÖ {message}")
    elif success is False:
        print(f"‚ùå {message}")
    else:
        print(f"üîÑ {message}")

def test_registration_email():
    """Test 1: Email d'inscription (welcome email)"""
    print_section("TEST 1: EMAIL D'INSCRIPTION")
    
    print_step("‚ö†Ô∏è Test d'inscription ignor√© (compte sevan@cnx4-0.com d√©j√† existant)", None)
    print("   ‚ÑπÔ∏è  L'email de bienvenue a d√©j√† √©t√© envoy√© lors de la cr√©ation initiale du compte")
    print(f"   üìß Email utilis√©: {TEST_EMAIL}")
    
    # Retourner succ√®s car le compte existe d√©j√†
    return True, TEST_EMAIL

def test_interview_invitation_email():
    """Test 2: Email d'invitation √† un entretien"""
    print_section("TEST 2: EMAIL D'INVITATION ENTRETIEN")
    
    # ID de candidature existante sur Azure
    application_id = "88f1316c-a848-4765-9419-597a3cc0f24f"
    
    # 1. Connexion admin
    print_step("Connexion en tant qu'admin...")
    try:
        admin_login = requests.post(
            f"{BASE_URL}/auth/login",
            data={"username": ADMIN_EMAIL, "password": ADMIN_PASSWORD},
            timeout=10
        )
        
        if admin_login.status_code != 200:
            print_step(f"‚ùå Connexion admin √©chou√©e: {admin_login.status_code}", False)
            return False
        
        admin_token = admin_login.json()["access_token"]
        admin_headers = {"Authorization": f"Bearer {admin_token}"}
        print_step("‚úÖ Admin connect√©", True)
    except Exception as e:
        print_step(f"‚ùå Erreur connexion admin: {str(e)}", False)
        return False
    
    # 2. R√©cup√©rer directement les d√©tails de la candidature connue
    try:
        print_step(f"R√©cup√©ration des d√©tails de la candidature {application_id}...")
        app_detail_response = requests.get(
            f"{BASE_URL}/applications/{application_id}",
            headers=admin_headers,
            timeout=10
        )
        
        # Initialiser les variables par d√©faut
        candidate_email = TEST_EMAIL
        candidate_name = "Sevan Kedesh IKISSA PENDY"
        job_title = "Chef de Projet IT Senior"
        
        if app_detail_response.status_code == 200:
            app_details = app_detail_response.json()
            candidate_email = app_details.get("candidate", {}).get("email", TEST_EMAIL)
            first_name = app_details.get('candidate', {}).get('first_name', 'Sevan')
            last_name = app_details.get('candidate', {}).get('last_name', 'IKISSA')
            candidate_name = f"{first_name} {last_name}".strip()
            job_title = app_details.get("job_offer", {}).get("title", "Poste")
            
            print_step("‚úÖ D√©tails de la candidature r√©cup√©r√©s", True)
            print(f"   üë§ Candidat: {candidate_name}")
            print(f"   üìß Email: {candidate_email}")
            print(f"   üíº Poste: {job_title}")
        else:
            print_step(f"‚ö†Ô∏è Code {app_detail_response.status_code} - Utilisation des valeurs par d√©faut", None)
        
    except Exception as e:
        print_step(f"‚ùå Erreur: {str(e)}", False)
        return False
    
    # 3. Planifier un entretien (= envoyer l'email d'invitation)
    print_step("Planification d'un entretien (envoi email)...")
    
    # Date/heure de l'entretien (dans 3 jours)
    interview_date = (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d")
    interview_time = "14:30:00"
    
    interview_data = {
        "application_id": application_id,
        "candidate_name": candidate_name if candidate_name != "N/A" else "Candidat",
        "job_title": job_title if job_title != "N/A" else "Poste",
        "date": interview_date,
        "time": interview_time,
        "location": "Si√®ge SEEG - Salle de Conf√©rence B",
        "notes": "Test d'email d'invitation. Entretien technique et RH. Dur√©e estim√©e: 1h30. Veuillez apporter vos documents originaux."
    }
    
    try:
        interview_response = requests.post(
            f"{BASE_URL}/interviews/slots",
            headers=admin_headers,
            json=interview_data,
            timeout=30
        )
        
        if interview_response.status_code == 201:
            interview = interview_response.json()
            print_step("‚úÖ Entretien planifi√© avec succ√®s !", True)
            print(f"   üÜî ID Entretien: {interview.get('id')}")
            print(f"   üìÖ Date: {interview.get('date')}")
            print(f"   ‚è∞ Heure: {interview.get('time')}")
            print(f"   üìç Lieu: {interview.get('location')}")
            print(f"\n   üìß EMAIL D'INVITATION ENVOY√â √Ä: {candidate_email}")
            print(f"   ‚û°Ô∏è  V√©rifiez la bo√Æte mail du candidat !")
            print(f"\n   üîî Une notification in-app a √©galement √©t√© cr√©√©e")
            return True
        else:
            print_step(f"‚ùå √âchec planification: {interview_response.status_code}", False)
            print(f"   D√©tails: {interview_response.text[:300]}")
            return False
    except Exception as e:
        print_step(f"‚ùå Erreur: {str(e)}", False)
        return False

def test_password_reset_email():
    """Test 3: Email de r√©initialisation de mot de passe"""
    print_section("TEST 3: EMAIL RESET PASSWORD")
    
    print_step(f"Demande de r√©initialisation pour: {TEST_EMAIL}")
    
    try:
        response = requests.post(
            f"{BASE_URL}/auth/forgot-password",
            json={"email": TEST_EMAIL},
            timeout=30
        )
        
        if response.status_code == 200:
            print_step("‚úÖ Demande de reset envoy√©e avec succ√®s !", True)
            print(f"   üìß Email de r√©initialisation envoy√© √†: {TEST_EMAIL}")
            print(f"   ‚ÑπÔ∏è  V√©rifiez la bo√Æte mail pour le lien de reset")
            return True
        else:
            print_step(f"‚ö†Ô∏è R√©ponse: {response.status_code}", None)
            print(f"   D√©tails: {response.text[:200]}")
            return False
    except Exception as e:
        print_step(f"‚ùå Erreur: {str(e)}", False)
        return False

def test_application_submission_email():
    """Test 4: Email de confirmation de candidature"""
    print_section("TEST 4: EMAIL SOUMISSION CANDIDATURE")
    
    print_step("Ce test n√©cessite de soumettre une vraie candidature")
    print("   ‚ÑπÔ∏è  Utilisez le frontend ou un autre test pour cr√©er une candidature")
    print("   ‚ÑπÔ∏è  L'email de confirmation sera automatiquement envoy√©")
    return None

def main():
    """Fonction principale pour ex√©cuter tous les tests"""
    print("\n" + "=" * 80)
    print("  üß™ TESTS D'ENVOI D'EMAILS - API PRODUCTION")
    print("  " + "=" * 78)
    print(f"  üìç API: {BASE_URL}")
    print(f"  üìß Email admin: {ADMIN_EMAIL}")
    print(f"  üìß Email test: {TEST_EMAIL}")
    print("=" * 80)
    
    results = {}
    
    # Test 1: Email d'inscription
    success, new_email = test_registration_email()
    results["registration"] = success
    time.sleep(2)
    
    # Test 2: Email d'invitation entretien
    success = test_interview_invitation_email()
    results["interview_invitation"] = success
    time.sleep(2)
    
    # Test 3: Email reset password
    success = test_password_reset_email()
    results["password_reset"] = success
    
    # Test 4: Info
    test_application_submission_email()
    
    # R√©sum√©
    print_section("üìä R√âSUM√â DES TESTS")
    
    print("\nüìß R√©sultats par type d'email:")
    for test_name, result in results.items():
        if result is True:
            print(f"   ‚úÖ {test_name.replace('_', ' ').title()}")
        elif result is False:
            print(f"   ‚ùå {test_name.replace('_', ' ').title()}")
        else:
            print(f"   ‚ö†Ô∏è  {test_name.replace('_', ' ').title()} - Non test√©")
    
    success_count = sum(1 for r in results.values() if r is True)
    total_count = len([r for r in results.values() if r is not None])
    
    print(f"\nüìà Score: {success_count}/{total_count} tests r√©ussis")
    
    if success_count == total_count:
        print("\nüéâ TOUS LES TESTS D'EMAILS ONT R√âUSSI !")
        print("   ‚úÖ Le syst√®me d'envoi d'emails fonctionne correctement en production")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©")
        print("   ‚ÑπÔ∏è  V√©rifiez la configuration SMTP dans les variables d'environnement Azure")
    
    print("\nüí° INSTRUCTIONS:")
    print("   1. V√©rifiez les bo√Ætes mail des destinataires")
    print("   2. Consultez les logs Azure pour plus de d√©tails:")
    print("      az webapp log tail --name seeg-backend-api --resource-group seeg-rg")
    print("\n" + "=" * 80 + "\n")

if __name__ == "__main__":
    main()

