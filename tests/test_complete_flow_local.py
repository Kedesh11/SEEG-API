"""
Test complet du flow de candidature en local avec cr√©ation d'offre
"""
import requests
import json

BASE_URL = "http://localhost:8000/api/v1"

def test_complete_flow():
    print("="*70)
    print("TEST COMPLET: Cr√©ation offre + Candidature en local")
    print("="*70)
    
    # ========== PARTIE 1: CR√âER ADMIN PUIS RECRUTEUR ET OFFRE ==========
    print("\n" + "="*70)
    print("PARTIE 1: CR√âATION D'UNE OFFRE AVEC QUESTIONS MTP")
    print("="*70)
    
    # 1. Connexion avec l'admin existant
    print("\n1Ô∏è‚É£  Connexion admin...")
    login_data = {
        "username": "sevankedesh11@gmail.com",
        "password": "Sevan@Seeg"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    if response.status_code != 200:
        print(f"   ‚ùå Erreur connexion admin: {response.status_code}")
        return False
    
    token_data = response.json()
    admin_token = token_data.get("access_token")
    admin_headers = {"Authorization": f"Bearer {admin_token}"}
    print("   ‚úÖ Admin connect√©")
    
    # 2. Cr√©er un recruteur via l'admin
    print("\n2Ô∏è‚É£  Cr√©ation d'un recruteur via admin...")
    recruiter_data = {
        "email": "recruteur23.local@seeg.com",
        "password": "Recruteur1234!",
        "first_name": "Marie Jeanne",
        "last_name": "BABONGUI",
        "role": "recruiter",
        "sexe": "F",
        "date_of_birth": "1986-07-15"
    }
    
    response = requests.post(f"{BASE_URL}/auth/create-user", headers=admin_headers, json=recruiter_data)
    if response.status_code in [200, 201]:
        print("   ‚úÖ Recruteur cr√©√©")
    elif response.status_code == 400 and "existe d√©j√†" in response.text:
        print("   ‚ÑπÔ∏è  Recruteur existe d√©j√†")
    
    # 3. Connexion recruteur
    print("\n3Ô∏è‚É£  Connexion du recruteur...")
    login_data = {
        "username": recruiter_data["email"],
        "password": "Recruteur1234!"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    if response.status_code != 200:
        print(f"   ‚ùå Erreur connexion recruteur: {response.status_code}")
        return False
    
    token_data = response.json()
    recruiter_token = token_data.get("access_token")
    recruiter_headers = {"Authorization": f"Bearer {recruiter_token}"}
    print("   ‚úÖ Recruteur connect√©")
    
    # 4. Cr√©er une offre avec questions MTP
    print("\n4Ô∏è‚É£  Cr√©ation d'une offre avec questions MTP...")
    job_data = {
        "title": "D√©veloppeur Full Stack - Test Local",
        "description": "Poste pour tester les candidatures avec questions MTP",
        "department": "IT",
        "location": "Libreville",
        "contract_type": "CDI",
        "experience_required": "3-5 ans",
        "salary_range": "800000-1200000 FCFA",
        "offer_status": "externe",
        "questions_mtp": {
            "questions_metier": [
                "D√©crivez votre exp√©rience en d√©veloppement web",
                "Quels frameworks JavaScript ma√Ætrisez-vous ?",
                "Parlez-nous d'un projet technique complexe que vous avez men√©"
            ],
            "questions_talent": [
                "Comment g√©rez-vous les d√©lais serr√©s ?",
                "D√©crivez une situation o√π vous avez r√©solu un conflit d'√©quipe"
            ],
            "questions_paradigme": [
                "Quelle est votre vision du travail en √©quipe ?",
                "Comment vous adaptez-vous aux nouvelles technologies ?"
            ]
        },
        "requirements": ["Licence en informatique", "3 ans d'exp√©rience"],
        "responsibilities": ["D√©veloppement", "Code review", "Mentorat"],
        "benefits": ["Assurance sant√©", "Prime de performance"]
    }
    
    response = requests.post(f"{BASE_URL}/jobs/", headers=recruiter_headers, json=job_data)
    if response.status_code in [200, 201]:
        result = response.json()
        # Si r√©ponse directe ou dans "data"
        job_id = result.get("id") or result.get("data", {}).get("id")
        print(f"   ‚úÖ Offre cr√©√©e avec succ√®s")
        print(f"   üìã ID: {job_id}")
        print(f"   üìä Questions MTP:")
        print(f"      - M√©tier: 3 questions")
        print(f"      - Talent: 2 questions")
        print(f"      - Paradigme: 2 questions")
    else:
        print(f"   ‚ùå Erreur cr√©ation offre: {response.status_code}")
        try:
            print(f"      {json.dumps(response.json(), indent=6, ensure_ascii=False)}")
        except:
            print(f"      {response.text}")
        return False
    
    # ========== PARTIE 2: CR√âER UN CANDIDAT ET POSTULER ==========
    print("\n" + "="*70)
    print("PARTIE 2: CANDIDATURE √Ä L'OFFRE")
    print("="*70)
    
    # 5. Cr√©er un candidat
    print("\n5Ô∏è‚É£  Cr√©ation d'un compte candidat...")
    candidate_data = {
        "email": "candidat.test.local@example.com",
        "password": "Candidat123!",
        "first_name": "Jean",
        "last_name": "Testeur",
        "role": "candidate",
        "sexe": "M",
        "candidate_status": "externe",
        "date_of_birth": "1995-03-20"
    }
    
    response = requests.post(f"{BASE_URL}/auth/signup", json=candidate_data)
    if response.status_code in [200, 201]:
        print("   ‚úÖ Compte candidat cr√©√©")
    elif response.status_code == 400 and "existe d√©j√†" in response.text:
        print("   ‚ÑπÔ∏è  Compte existe d√©j√†")
    
    # 6. Connexion candidat
    print("\n6Ô∏è‚É£  Connexion du candidat...")
    login_data = {
        "username": candidate_data["email"],
        "password": "Candidat123!"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    if response.status_code != 200:
        print(f"   ‚ùå Erreur connexion: {response.status_code}")
        return False
    
    token_data = response.json()
    candidate_token = token_data.get("access_token")
    candidate_headers = {"Authorization": f"Bearer {candidate_token}"}
    
    # R√©cup√©rer l'ID du candidat
    response = requests.get(f"{BASE_URL}/users/me", headers=candidate_headers)
    user = response.json().get("data")
    candidate_id = user.get("id")
    print(f"   ‚úÖ Candidat connect√©")
    print(f"   üë§ ID: {candidate_id}")
    
    # 7. TEST 1: Candidature SANS r√©ponses MTP (doit √©chouer)
    print("\n7Ô∏è‚É£  TEST 1: Candidature SANS r√©ponses MTP (doit √™tre rejet√©e)...")
    application_data_no_mtp = {
        "candidate_id": candidate_id,
        "job_offer_id": job_id,
        "ref_entreprise": "Entreprise Test",
        "ref_fullname": "R√©f√©rent Test",
        "ref_mail": "referent@test.com",
        "ref_contact": "+24106223344"
    }
    
    response = requests.post(f"{BASE_URL}/applications/", headers=candidate_headers, json=application_data_no_mtp)
    if response.status_code == 400 and "MTP" in response.text:
        print("   ‚úÖ CORRECT: Candidature rejet√©e (MTP obligatoires)")
        try:
            error = response.json()
            print(f"      Message: {error.get('detail')}")
        except:
            pass
    else:
        print(f"   ‚ö†Ô∏è  R√©sultat inattendu: {response.status_code}")
        print(f"      {response.text[:200]}")
    
    # 8. TEST 2: Candidature avec MAUVAIS nombre de r√©ponses (doit √©chouer)
    print("\n8Ô∏è‚É£  TEST 2: Candidature avec nombre incorrect de r√©ponses...")
    application_data_wrong_count = {
        "candidate_id": candidate_id,
        "job_offer_id": job_id,
        "ref_entreprise": "Entreprise Test",
        "ref_fullname": "R√©f√©rent Test",
        "ref_mail": "referent@test.com",
        "ref_contact": "+24106223344",
        "mtp_answers": {
            "reponses_metier": ["R√©ponse 1", "R√©ponse 2"],  # Seulement 2 au lieu de 3
            "reponses_talent": ["R√©ponse 1", "R√©ponse 2"],
            "reponses_paradigme": ["R√©ponse 1", "R√©ponse 2"]
        }
    }
    
    response = requests.post(f"{BASE_URL}/applications/", headers=candidate_headers, json=application_data_wrong_count)
    if response.status_code == 400:
        print("   ‚úÖ CORRECT: Candidature rejet√©e (nombre incorrect)")
        try:
            error = response.json()
            print(f"      Message: {error.get('detail')[:100]}...")
        except:
            pass
    else:
        print(f"   ‚ö†Ô∏è  R√©sultat inattendu: {response.status_code}")
    
    # 9. TEST 3: Candidature avec TOUTES les r√©ponses correctes (doit r√©ussir)
    print("\n9Ô∏è‚É£  TEST 3: Candidature avec toutes les r√©ponses MTP correctes...")
    application_data_correct = {
        "candidate_id": candidate_id,
        "job_offer_id": job_id,
        "ref_entreprise": "Soci√©t√© ABC Gabon",
        "ref_fullname": "Marie Dupont",
        "ref_mail": "marie.dupont@abc-gabon.com",
        "ref_contact": "+241 01 23 45 67",
        "mtp_answers": {
            "reponses_metier": [
                "J'ai 5 ans d'exp√©rience en d√©veloppement web avec React et Node.js. J'ai travaill√© sur plusieurs projets e-commerce.",
                "Je ma√Ætrise React, Vue.js, Angular c√¥t√© frontend et Node.js, Express c√¥t√© backend.",
                "J'ai dirig√© la refonte compl√®te d'une plateforme bancaire utilis√©e par 50000 clients quotidiennement."
            ],
            "reponses_talent": [
                "Je priorise les t√¢ches, communique r√©guli√®rement avec l'√©quipe et n'h√©site pas √† demander de l'aide si n√©cessaire.",
                "J'ai m√©diatis√© un conflit entre deux d√©veloppeurs en organisant une r√©union constructive o√π chacun a pu s'exprimer."
            ],
            "reponses_paradigme": [
                "Le travail en √©quipe permet de combiner les forces de chacun et d'atteindre des objectifs plus ambitieux.",
                "Je consacre du temps chaque semaine √† la veille technologique et j'aime exp√©rimenter de nouveaux outils."
            ]
        }
    }
    
    response = requests.post(f"{BASE_URL}/applications/", headers=candidate_headers, json=application_data_correct)
    if response.status_code == 201:
        result = response.json()
        application_id = result.get("data", {}).get("id")
        print("   ‚úÖ SUCC√àS: Candidature cr√©√©e avec toutes les r√©ponses MTP!")
        print(f"      üìã ID candidature: {application_id}")
        print(f"      ‚úÖ 3 r√©ponses M√©tier valid√©es")
        print(f"      ‚úÖ 2 r√©ponses Talent valid√©es")
        print(f"      ‚úÖ 2 r√©ponses Paradigme valid√©es")
        
        # V√©rifier la candidature
        response = requests.get(f"{BASE_URL}/applications/{application_id}", headers=candidate_headers)
        if response.status_code == 200:
            app_data = response.json().get("data")
            print(f"\n   üìä V√©rification de la candidature:")
            print(f"      - Status: {app_data.get('status')}")
            print(f"      - Ref entreprise: {app_data.get('ref_entreprise')}")
            print(f"      - MTP answers: {'‚úÖ Pr√©sentes' if app_data.get('mtp_answers') else '‚ùå Manquantes'}")
        
        # 10. TEST 4: Mise √† jour du profil candidat (maintenant que le profil existe)
        print("\nüîü TEST 4: Mise √† jour du profil candidat...")
        profile_update = {
            "years_experience": 8,
            "current_position": "Senior Full Stack Developer",
            "availability": "Imm√©diate",
            "skills": ["React", "Node.js", "Python", "Docker"],
            "expected_salary_min": 1000000,
            "expected_salary_max": 1500000
        }
        
        response = requests.put(f"{BASE_URL}/users/me/profile", headers=candidate_headers, json=profile_update)
        if response.status_code == 200:
            result = response.json()
            profile_data = result.get("data")
            print("   ‚úÖ SUCC√àS: Profil candidat mis √† jour!")
            print(f"      üë§ Exp√©rience: {profile_data.get('years_experience')} ans")
            print(f"      üíº Poste: {profile_data.get('current_position')}")
            print(f"      üìÖ Disponibilit√©: {profile_data.get('availability')}")
            print(f"      üí∞ Salaire: {profile_data.get('expected_salary_min')} - {profile_data.get('expected_salary_max')} FCFA")
        else:
            print(f"   ‚ùå √âCHEC mise √† jour profil: {response.status_code}")
            try:
                error = response.json()
                print(f"      {json.dumps(error, indent=6, ensure_ascii=False)}")
            except:
                print(f"      {response.text}")
            return False
        
        print("\n" + "="*70)
        print("‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        print("   1Ô∏è‚É£  Offre cr√©√©e avec questions MTP")
        print("   2Ô∏è‚É£  Candidature sans MTP rejet√©e (validation OK)")
        print("   3Ô∏è‚É£  Candidature avec MTP incorrects rejet√©e (validation OK)")
        print("   4Ô∏è‚É£  Candidature compl√®te accept√©e (profil cr√©√© auto)")
        print("   5Ô∏è‚É£  Profil candidat mis √† jour avec succ√®s")
        print("="*70)
        return True
        
    elif response.status_code == 400 and "existe d√©j√†" in response.text:
        print("   ‚ÑπÔ∏è  Candidature existe d√©j√† (test d√©j√† effectu√©)")
        print("\n" + "="*70)
        print("‚úÖ TOUS LES TESTS SONT PASS√âS!")
        print("="*70)
        return True
    else:
        print(f"   ‚ùå √âCHEC: {response.status_code}")
        try:
            error = response.json()
            print(f"      {json.dumps(error, indent=6, ensure_ascii=False)}")
        except:
            print(f"      {response.text}")
        return False

if __name__ == "__main__":
    try:
        success = test_complete_flow()
        exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        exit(1)

