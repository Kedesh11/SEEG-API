"""
Test complet du flow de candidature - PRODUCTION
Cr√©ation d'offre avec MTP + Tests de candidature
"""
import requests
import json
from typing import Optional

# Configuration PRODUCTION
BASE_URL = "https://seeg-backend-api.azurewebsites.net/api/v1"

# Credentials
ADMIN_EMAIL = "sevankedesh11@gmail.com"
ADMIN_PASSWORD = "Sevan@Seeg"

def print_section(title: str):
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)

def test_complete_application_flow():
    """Test du flux complet de candidature"""
    print("="*70)
    print("TEST COMPLET: Candidature avec MTP - PRODUCTION")
    print("="*70)
    
    # ========== PARTIE 1: CR√âER OFFRE AVEC MTP ==========
    print_section("PARTIE 1: CR√âATION D'UNE OFFRE AVEC QUESTIONS MTP")
    
    # 1. Connexion admin
    print("\n1Ô∏è‚É£  Connexion admin...")
    login_data = {
        "username": ADMIN_EMAIL,
        "password": ADMIN_PASSWORD
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data, timeout=30)
    if response.status_code != 200:
        print(f"   ‚ùå Erreur connexion admin: {response.status_code}")
        print(f"      {response.text}")
        return False
    
    token_data = response.json()
    admin_token = token_data.get("access_token")
    admin_headers = {"Authorization": f"Bearer {admin_token}"}
    print("   ‚úÖ Admin connect√©")
    
    # 2. Cr√©er une offre avec questions MTP
    print("\n2Ô∏è‚É£  Cr√©ation d'une offre avec questions MTP...")
    job_data = {
        "title": "D√©veloppeur Full Stack - Test Production",
        "description": "Poste pour tester les candidatures avec questions MTP en production",
        "department": "IT",
        "location": "Libreville",
        "contract_type": "CDI",
        "experience_required": "3-5 ans",
        "salary_range": "800000-1200000 FCFA",
        "offer_status": "externe",
        "question_metier": "D√©crivez votre exp√©rience en d√©veloppement web\nQuels frameworks JavaScript ma√Ætrisez-vous ?",
        "question_talent": "Comment g√©rez-vous les d√©lais serr√©s ?\nD√©crivez une situation o√π vous avez r√©solu un conflit",
        "question_paradigme": "Quelle est votre vision du travail en √©quipe ?\nComment vous adaptez-vous aux nouvelles technologies ?",
        "requirements": ["Licence en informatique", "3 ans d'exp√©rience"],
        "responsibilities": ["D√©veloppement", "Code review"],
        "benefits": ["Assurance sant√©", "Formation continue"]
    }
    
    response = requests.post(f"{BASE_URL}/jobs/", headers=admin_headers, json=job_data, timeout=30)
    if response.status_code in [200, 201]:
        result = response.json()
        job_id = result.get("id")
        questions_mtp = result.get("questions_mtp", {})
        
        print(f"   ‚úÖ Offre cr√©√©e avec succ√®s")
        print(f"   üìã ID: {job_id}")
        print(f"   üìä Questions MTP:")
        print(f"      - M√©tier: {len(questions_mtp.get('questions_metier', []))} questions")
        print(f"      - Talent: {len(questions_mtp.get('questions_talent', []))} questions")
        print(f"      - Paradigme: {len(questions_mtp.get('questions_paradigme', []))} questions")
    else:
        print(f"   ‚ùå Erreur cr√©ation offre: {response.status_code}")
        print(f"      {response.text}")
        return False
    
    # ========== PARTIE 2: CR√âER CANDIDAT ET POSTULER ==========
    print_section("PARTIE 2: CANDIDATURE √Ä L'OFFRE")
    
    # 3. Cr√©er un candidat
    print("\n3Ô∏è‚É£  Cr√©ation d'un compte candidat...")
    candidate_email = "candidat.prod.test@example.com"
    candidate_data = {
        "email": candidate_email,
        "password": "CandidatProd123!",
        "first_name": "Pierre",
        "last_name": "Production",
        "role": "candidate",
        "sexe": "M",
        "candidate_status": "externe",
        "date_of_birth": "1995-03-20"
    }
    
    response = requests.post(f"{BASE_URL}/auth/signup", json=candidate_data, timeout=30)
    if response.status_code in [200, 201]:
        print("   ‚úÖ Compte candidat cr√©√©")
    elif response.status_code == 400 and "existe d√©j√†" in response.text:
        print("   ‚ÑπÔ∏è  Compte existe d√©j√†, on continue")
    else:
        print(f"   ‚ùå Erreur cr√©ation: {response.status_code}")
        print(f"      {response.text}")
        return False
    
    # 4. Connexion candidat
    print("\n4Ô∏è‚É£  Connexion du candidat...")
    login_data = {
        "username": candidate_email,
        "password": "CandidatProd123!"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login", data=login_data, timeout=30)
    if response.status_code != 200:
        print(f"   ‚ùå Erreur connexion: {response.status_code}")
        print(f"      {response.text}")
        return False
    
    token_data = response.json()
    candidate_token = token_data.get("access_token")
    candidate_headers = {"Authorization": f"Bearer {candidate_token}"}
    
    # R√©cup√©rer l'ID du candidat
    response = requests.get(f"{BASE_URL}/users/me", headers=candidate_headers, timeout=30)
    user_data = response.json()
    
    # L'ID peut √™tre directement dans la r√©ponse ou dans token_data
    candidate_id = user_data.get("id") or token_data.get("user", {}).get("id")
    
    if not candidate_id:
        print(f"   ‚ö†Ô∏è  Structure de r√©ponse /users/me:")
        print(f"      {json.dumps(user_data, indent=6, ensure_ascii=False)[:500]}")
        # Essayer d'autres chemins possibles
        candidate_id = user_data.get("data", {}).get("id")
    
    print(f"   ‚úÖ Candidat connect√©")
    print(f"   üë§ ID: {candidate_id}")
    
    # 5. TEST 1: Candidature SANS r√©ponses MTP (doit √©chouer)
    print("\n5Ô∏è‚É£  TEST 1: Candidature SANS r√©ponses MTP (doit √™tre rejet√©e)...")
    application_data_no_mtp = {
        "candidate_id": candidate_id,
        "job_offer_id": job_id,
        "ref_entreprise": "Entreprise Test Prod",
        "ref_fullname": "R√©f√©rent Test",
        "ref_mail": "referent@test.com",
        "ref_contact": "+24106223344"
    }
    
    response = requests.post(f"{BASE_URL}/applications/", headers=candidate_headers, json=application_data_no_mtp, timeout=30)
    if response.status_code == 400 or (response.status_code == 422 and "MTP" in response.text):
        print("   ‚úÖ CORRECT: Candidature rejet√©e (MTP obligatoires)")
        try:
            error = response.json()
            detail = error.get('detail', '')
            if isinstance(detail, list) and len(detail) > 0:
                detail = detail[0].get('msg', str(detail))
            print(f"      Message: {detail}")
        except:
            pass
    else:
        print(f"   ‚ö†Ô∏è  R√©sultat inattendu: {response.status_code}")
        print(f"      {response.text[:300]}")
    
    # 6. TEST 2: Candidature avec TOUTES les r√©ponses correctes (doit r√©ussir)
    print("\n6Ô∏è‚É£  TEST 2: Candidature avec toutes les r√©ponses MTP correctes...")
    application_data_correct = {
        "candidate_id": candidate_id,
        "job_offer_id": job_id,
        "ref_entreprise": "Soci√©t√© XYZ Gabon",
        "ref_fullname": "Sophie Martin",
        "ref_mail": "sophie.martin@xyz-gabon.com",
        "ref_contact": "+241 01 23 45 67",
        "mtp_answers": {
            "reponses_metier": [
                "J'ai 5 ans d'exp√©rience en d√©veloppement web full stack. J'ai travaill√© avec React, Angular et Vue.js c√¥t√© frontend, et Node.js et Python c√¥t√© backend.",
                "Je ma√Ætrise principalement React et Vue.js. J'ai √©galement une bonne exp√©rience avec Angular et Next.js pour les projets plus complexes."
            ],
            "reponses_talent": [
                "Face aux d√©lais serr√©s, je priorise les fonctionnalit√©s critiques, communique r√©guli√®rement avec l'√©quipe et adapte ma m√©thode de travail pour maintenir la qualit√©.",
                "Lors d'un projet critique, deux d√©veloppeurs avaient des approches diff√©rentes. J'ai organis√© une r√©union technique o√π nous avons compar√© les solutions objectivement, ce qui a permis de trouver un compromis."
            ],
            "reponses_paradigme": [
                "Le travail en √©quipe est essentiel dans le d√©veloppement logiciel. Il permet le partage des connaissances, la revue de code et l'am√©lioration continue de la qualit√©.",
                "Je reste curieux et je consacre du temps chaque semaine √† la veille technologique. J'aime exp√©rimenter de nouveaux outils sur des projets personnels avant de les proposer en production."
            ]
        }
    }
    
    response = requests.post(f"{BASE_URL}/applications/", headers=candidate_headers, json=application_data_correct, timeout=30)
    
    if response.status_code == 201:
        result = response.json()
        application_data = result.get("data", {})
        application_id = application_data.get("id")
        
        print("   ‚úÖ SUCC√àS: Candidature cr√©√©e avec toutes les r√©ponses MTP!")
        print(f"      üìã ID candidature: {application_id}")
        print(f"      ‚úÖ 2 r√©ponses M√©tier valid√©es")
        print(f"      ‚úÖ 2 r√©ponses Talent valid√©es")
        print(f"      ‚úÖ 2 r√©ponses Paradigme valid√©es")
        
        # V√©rifier la candidature
        response = requests.get(f"{BASE_URL}/applications/{application_id}", headers=candidate_headers, timeout=30)
        if response.status_code == 200:
            app_data = response.json().get("data", {})
            print(f"\n   üìä V√©rification de la candidature:")
            print(f"      - Status: {app_data.get('status')}")
            print(f"      - Ref entreprise: {app_data.get('ref_entreprise')}")
            print(f"      - MTP answers: {'‚úÖ Pr√©sentes' if app_data.get('mtp_answers') else '‚ùå Manquantes'}")
        
        print_section("R√âSULTAT FINAL")
        print("‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        print(f"   üìã Job ID: {job_id}")
        print(f"   üìã Application ID: {application_id}")
        print(f"   üë§ Candidate ID: {candidate_id}")
        return True
        
    elif response.status_code == 400 and "existe d√©j√†" in response.text:
        print("   ‚ÑπÔ∏è  Candidature existe d√©j√† (test d√©j√† effectu√©)")
        print_section("R√âSULTAT FINAL")
        print("‚úÖ TESTS VALID√âS!")
        return True
    else:
        print(f"   ‚ùå √âCHEC: {response.status_code}")
        try:
            error = response.json()
            print(f"      {json.dumps(error, indent=6, ensure_ascii=False)}")
        except:
            print(f"      {response.text}")
        return False

if __name__ == "__main__":
    try:
        success = test_complete_application_flow()
        exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        exit(1)

