"""
Test pour explorer la base de donn√©es Azure
"""
import pytest
from sqlalchemy import create_engine, text


class TestExploreAzure:
    """Tests pour explorer la base de donn√©es Azure."""
    
    def test_azure_database_connection(self):
        """Test la connexion √† la base de donn√©es Azure."""
        try:
            database_url = "postgresql://Sevan:Azure%40Seeg@seegrecruiter.postgres.database.azure.com:5432/postgres"
            engine = create_engine(database_url, echo=False)
            
            with engine.connect() as connection:
                result = connection.execute(text("SELECT 1 as test"))
                row = result.fetchone()
                assert row[0] == 1
                
            print("‚úÖ Connexion √† la base de donn√©es Azure r√©ussie")
            
        except Exception as e:
            pytest.fail(f"‚ùå Erreur de connexion √† la base de donn√©es Azure: {e}")
    
    def test_azure_database_list_all_tables(self):
        """Test pour lister toutes les tables existantes."""
        try:
            database_url = "postgresql://Sevan:Azure%40Seeg@seegrecruiter.postgres.database.azure.com:5432/postgres"
            engine = create_engine(database_url, echo=False)
            
            with engine.connect() as connection:
                # Lister toutes les tables
                result = connection.execute(text("""
                    SELECT table_name, table_type
                    FROM information_schema.tables
                    WHERE table_schema = 'public'
                    ORDER BY table_name
                """))
                
                tables = result.fetchall()
                
                print(f"üìä Nombre total de tables: {len(tables)}")
                
                if tables:
                    print("üìã Tables existantes:")
                    for table in tables:
                        print(f"  - {table[0]} ({table[1]})")
                else:
                    print("‚ö†Ô∏è Aucune table trouv√©e dans le sch√©ma public")
                    
        except Exception as e:
            pytest.fail(f"‚ùå Erreur lors de la liste des tables: {e}")
    
    def test_azure_database_list_all_schemas(self):
        """Test pour lister tous les sch√©mas."""
        try:
            database_url = "postgresql://Sevan:Azure%40Seeg@seegrecruiter.postgres.database.azure.com:5432/postgres"
            engine = create_engine(database_url, echo=False)
            
            with engine.connect() as connection:
                # Lister tous les sch√©mas
                result = connection.execute(text("""
                    SELECT schema_name
                    FROM information_schema.schemata
                    ORDER BY schema_name
                """))
                
                schemas = result.fetchall()
                
                print(f"üìä Nombre total de sch√©mas: {len(schemas)}")
                
                print("üìã Sch√©mas existants:")
                for schema in schemas:
                    print(f"  - {schema[0]}")
                    
        except Exception as e:
            pytest.fail(f"‚ùå Erreur lors de la liste des sch√©mas: {e}")
    
    def test_azure_database_check_migrations(self):
        """Test pour v√©rifier les migrations Alembic."""
        try:
            database_url = "postgresql://Sevan:Azure%40Seeg@seegrecruiter.postgres.database.azure.com:5432/postgres"
            engine = create_engine(database_url, echo=False)
            
            with engine.connect() as connection:
                # V√©rifier si la table alembic_version existe
                result = connection.execute(text("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'alembic_version'
                    )
                """))
                
                exists = result.fetchone()[0]
                
                if exists:
                    print("‚úÖ Table alembic_version existe")
                    
                    # R√©cup√©rer la version actuelle
                    result = connection.execute(text("SELECT version_num FROM alembic_version"))
                    version = result.fetchone()
                    
                    if version:
                        print(f"üìä Version actuelle: {version[0]}")
                    else:
                        print("‚ö†Ô∏è Aucune version trouv√©e")
                else:
                    print("‚ö†Ô∏è Table alembic_version n'existe pas")
                    print("üí° Il faut probablement ex√©cuter les migrations")
                    
        except Exception as e:
            pytest.fail(f"‚ùå Erreur lors de la v√©rification des migrations: {e}")
    
    def test_azure_database_check_supabase_tables(self):
        """Test pour v√©rifier les tables Supabase."""
        try:
            database_url = "postgresql://Sevan:Azure%40Seeg@seegrecruiter.postgres.database.azure.com:5432/postgres"
            engine = create_engine(database_url, echo=False)
            
            with engine.connect() as connection:
                # V√©rifier les tables Supabase communes
                supabase_tables = [
                    'auth.users', 'auth.sessions', 'auth.refresh_tokens',
                    'public.users', 'public.job_offers', 'public.applications'
                ]
                
                print("üîç V√©rification des tables Supabase:")
                
                for table in supabase_tables:
                    schema, table_name = table.split('.')
                    
                    result = connection.execute(text(f"""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables 
                            WHERE table_schema = '{schema}' AND table_name = '{table_name}'
                        )
                    """))
                    
                    exists = result.fetchone()[0]
                    
                    if exists:
                        print(f"  ‚úÖ {table} existe")
                    else:
                        print(f"  ‚ùå {table} n'existe pas")
                        
        except Exception as e:
            pytest.fail(f"‚ùå Erreur lors de la v√©rification des tables Supabase: {e}")
    
    def test_azure_database_database_info(self):
        """Test pour obtenir des informations sur la base de donn√©es."""
        try:
            database_url = "postgresql://Sevan:Azure%40Seeg@seegrecruiter.postgres.database.azure.com:5432/postgres"
            engine = create_engine(database_url, echo=False)
            
            with engine.connect() as connection:
                # Informations sur la base de donn√©es
                result = connection.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                print(f"üìä Version PostgreSQL: {version}")
                
                # Nom de la base de donn√©es
                result = connection.execute(text("SELECT current_database()"))
                db_name = result.fetchone()[0]
                print(f"üìä Nom de la base de donn√©es: {db_name}")
                
                # Utilisateur actuel
                result = connection.execute(text("SELECT current_user"))
                user = result.fetchone()[0]
                print(f"üìä Utilisateur actuel: {user}")
                
        except Exception as e:
            pytest.fail(f"‚ùå Erreur lors de la r√©cup√©ration des informations: {e}")
